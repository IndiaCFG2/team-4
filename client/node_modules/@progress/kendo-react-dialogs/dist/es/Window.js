var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { WindowTitleBar } from './WindowTitlebar';
import { dispatchEvent, Keys, classNames } from '@progress/kendo-react-common';
import { Draggable } from '@progress/kendo-react-common';
import { ResizeHandlers } from './WindowResizeHandlers';
import { MiddleLayerOptimization } from './MiddleLayerOptimization';
import { windowStage } from './StageEnum';
var DEFAULT_WIDTH = 300;
var DEFAULT_HEIGHT = 300;
var DEFAULT_MIN_WIDTH = 120;
var DEFAULT_MIN_HEIGHT = 100;
var DEFAULT_STEP = 5;
var Window = /** @class */ (function (_super) {
    __extends(Window, _super);
    function Window(props) {
        var _this = _super.call(this, props) || this;
        /**
         * @hidden
         */
        _this.onPress = function (data) {
            var e = data.event;
            _this.windowCoordinatesState.differenceLeft = e.pageX - _this.left;
            _this.windowCoordinatesState.differenceTop = e.pageY - _this.top;
        };
        /**
         * @hidden
         */
        _this.onDrag = function (data) {
            var e = data.event;
            e.originalEvent.preventDefault();
            if (_this.windowStage !== windowStage.FULLSCREEN && _this.props.draggable) {
                _this.setState({
                    top: Math.max(e.pageY - _this.windowCoordinatesState.differenceTop, 0),
                    left: e.pageX - _this.windowCoordinatesState.differenceLeft,
                    isDragging: true
                });
                if (_this.props.onMove) {
                    _this.dispatchMoveEvent(_this.props.onMove, e, true, false);
                }
            }
        };
        /**
         * @hidden
         */
        _this.onRelease = function (data) {
            var e = data.event;
            if (_this.windowStage !== windowStage.FULLSCREEN && _this.props.draggable) {
                if (_this.props.onMove) {
                    _this.dispatchMoveEvent(_this.props.onMove, e, true, true);
                }
            }
            _this.setState({
                isDragging: false
            });
        };
        // Keyboard navigation
        _this.handleKeyDown = function (event) {
            if (event.target !== event.currentTarget) {
                return;
            }
            var minWidth = _this.props.minWidth || DEFAULT_MIN_WIDTH;
            var minHeight = _this.props.minHeight || DEFAULT_MIN_HEIGHT;
            if (event.ctrlKey && _this.props.resizable) {
                switch (event.keyCode) {
                    case Keys.up:
                        event.preventDefault();
                        if (minHeight <= (_this.height - DEFAULT_STEP)) {
                            _this.setState({ height: _this.height - DEFAULT_STEP });
                        }
                        break;
                    case Keys.down:
                        event.preventDefault();
                        _this.setState({ height: _this.height + DEFAULT_STEP });
                        break;
                    case Keys.left:
                        if (minWidth <= (_this.width - DEFAULT_STEP)) {
                            _this.setState({ width: _this.width - DEFAULT_STEP });
                        }
                        break;
                    case Keys.right:
                        _this.setState({ width: _this.width + DEFAULT_STEP });
                        break;
                    default: return;
                }
                _this.dispatchMoveEvent(_this.props.onResize, event, false, undefined);
                return;
            }
            if (event.altKey) {
                switch (event.keyCode) {
                    case Keys.up:
                        if (_this.windowStage === windowStage.MINIMIZED) {
                            _this.handleRestore(event);
                            dispatchEvent(_this.props.onStageChange, event, _this, { state: windowStage.DEFAULT });
                        }
                        else if (_this.windowStage === windowStage.DEFAULT) {
                            _this.handleFullscreen(event);
                            dispatchEvent(_this.props.onStageChange, event, _this, { state: windowStage.FULLSCREEN });
                        }
                        break;
                    case Keys.down:
                        if (_this.windowStage === windowStage.FULLSCREEN) {
                            _this.handleRestore(event);
                            dispatchEvent(_this.props.onStageChange, event, _this, { state: windowStage.DEFAULT });
                        }
                        else if (_this.windowStage === windowStage.DEFAULT) {
                            _this.handleMinimize(event);
                            dispatchEvent(_this.props.onStageChange, event, _this, { state: windowStage.MINIMIZED });
                        }
                        break;
                    default:
                }
                return;
            }
            if (!event.ctrlKey) {
                switch (event.keyCode) {
                    case Keys.esc:
                        if (_this.props.onClose) {
                            event.preventDefault();
                            _this.handleCloseWindow(event);
                            dispatchEvent(_this.props.onClose, event, _this, { state: undefined });
                        }
                        return;
                    case Keys.up:
                        _this.setState({ top: _this.state.top - DEFAULT_STEP });
                        break;
                    case Keys.down:
                        _this.setState({ top: _this.state.top + DEFAULT_STEP });
                        break;
                    case Keys.left:
                        _this.setState({ left: _this.state.left - DEFAULT_STEP });
                        break;
                    case Keys.right:
                        _this.setState({ left: _this.state.left + DEFAULT_STEP });
                        break;
                    default: return;
                }
            }
            _this.dispatchMoveEvent(_this.props.onMove, event, false, undefined);
        };
        // Get initial coordinates of the Window
        _this.getInitialTop = function () {
            if (_this.props.top !== undefined) {
                return _this.props.top;
            }
            if (_this.props.initialTop !== undefined) {
                return _this.props.initialTop;
            }
            var height = DEFAULT_HEIGHT;
            if (_this.props.height !== undefined) {
                height = _this.props.height;
            }
            else if (_this.props.initialHeight !== undefined) {
                height = _this.props.initialHeight;
            }
            return (window.innerHeight / 2) - (height / 2);
        };
        _this.getInitialLeft = function () {
            if (_this.props.left !== undefined) {
                return _this.props.left;
            }
            if (_this.props.initialLeft !== undefined) {
                return _this.props.initialLeft;
            }
            var width = DEFAULT_WIDTH;
            if (_this.props.width !== undefined) {
                width = _this.props.width;
            }
            else if (_this.props.initialWidth !== undefined) {
                width = _this.props.initialWidth;
            }
            return (window.innerWidth / 2) - (width / 2);
        };
        _this.getInitialWidth = function () {
            var width = DEFAULT_WIDTH;
            if (_this.props.width !== undefined) {
                width = _this.props.width;
            }
            else if (_this.props.initialWidth !== undefined) {
                width = _this.props.initialWidth;
            }
            return width;
        };
        _this.getInitialHeight = function () {
            var height = DEFAULT_HEIGHT;
            if (_this.props.height !== undefined) {
                height = _this.props.height;
            }
            else if (_this.props.initialHeight !== undefined) {
                height = _this.props.initialHeight;
            }
            return height;
        };
        // Handle actions
        _this.handleMinimize = function (event) {
            event.preventDefault();
            _this.windowCoordinatesState.leftBeforeAction = _this.left;
            _this.windowCoordinatesState.topBeforeAction = _this.top;
            _this.windowCoordinatesState.widthBeforeAction = _this.width;
            _this.windowCoordinatesState.heightBeforeAction = _this.height;
            _this.setState({
                stage: windowStage.MINIMIZED,
                height: 0
            });
            dispatchEvent(_this.props.onStageChange, event, _this, { state: windowStage.MINIMIZED });
        };
        _this.handleFullscreen = function (event) {
            event.preventDefault();
            _this.windowCoordinatesState.leftBeforeAction = _this.left;
            _this.windowCoordinatesState.topBeforeAction = _this.top;
            _this.windowCoordinatesState.widthBeforeAction = _this.width;
            _this.windowCoordinatesState.heightBeforeAction = _this.height;
            _this.setState({
                left: 0,
                top: 0,
                width: window.innerWidth,
                height: window.innerHeight,
                stage: windowStage.FULLSCREEN
            });
            dispatchEvent(_this.props.onStageChange, event, _this, { state: windowStage.FULLSCREEN });
        };
        _this.handleRestore = function (event) {
            event.preventDefault();
            if (_this.windowStage === windowStage.FULLSCREEN) {
                _this.setState({
                    stage: windowStage.DEFAULT,
                    left: _this.windowCoordinatesState.leftBeforeAction,
                    top: _this.windowCoordinatesState.topBeforeAction,
                    width: _this.windowCoordinatesState.widthBeforeAction,
                    height: _this.windowCoordinatesState.heightBeforeAction
                });
            }
            else if (_this.windowStage === windowStage.MINIMIZED) {
                _this.setState({
                    stage: windowStage.DEFAULT,
                    height: _this.windowCoordinatesState.heightBeforeAction
                });
            }
            dispatchEvent(_this.props.onStageChange, event, _this, { state: windowStage.DEFAULT });
        };
        _this.handleCloseWindow = function (event) {
            event.preventDefault();
            dispatchEvent(_this.props.onClose, event, _this, { state: undefined });
        };
        _this.handleDoubleClick = function (e) {
            if (_this.windowStage === windowStage.FULLSCREEN || _this.windowStage === windowStage.MINIMIZED) {
                _this.handleRestore(e);
            }
            else {
                _this.handleFullscreen(e);
            }
        };
        // Handle resizing
        _this.handleResize = function (event, props) {
            var currentWidth = _this.width;
            var currentHeight = _this.height;
            var minWidth = _this.props.minWidth || DEFAULT_MIN_WIDTH;
            var minHeight = _this.props.minHeight || DEFAULT_MIN_HEIGHT;
            var heightDifference = _this.top - event.pageY;
            var widthDifference = _this.left - event.pageX;
            var newWidth = event.pageX - _this.left;
            var newHeight = event.pageY - _this.top;
            var newState = Object.assign({}, _this.state, { isDragging: !props.end });
            if (props.direction.indexOf('n') >= 0 && minHeight - (currentHeight + heightDifference) < 0) {
                newState.top = event.pageY;
                newState.height = currentHeight + heightDifference;
            }
            if (props.direction.indexOf('s') >= 0 && (minHeight - newHeight < 0)) {
                newState.height = newHeight;
            }
            if (props.direction.indexOf('w') >= 0 && minWidth - (currentWidth + widthDifference) < 0) {
                newState.left = event.pageX;
                newState.width = currentWidth + widthDifference;
            }
            if (props.direction.indexOf('e') >= 0 && (minWidth - newWidth < 0)) {
                newState.width = newWidth;
            }
            _this.setState(newState);
            _this.dispatchMoveEvent(_this.props.onResize, event, true, props.end);
        };
        // Dispatcher for the resize and move events
        _this.dispatchMoveEvent = function (callback, event, drag, end) {
            if (!callback) {
                return;
            }
            callback.call(undefined, {
                nativeEvent: event.nativeEvent ? event.nativeEvent : event.originalEvent,
                drag: drag,
                end: end,
                target: _this,
                left: _this.state.left,
                top: _this.state.top,
                width: _this.state.width,
                hight: _this.state.height,
                height: _this.state.height
            });
        };
        _this.handleBrowserWindowResize = function () {
            if (_this.windowStage === windowStage.FULLSCREEN) {
                _this.setState({
                    width: window.innerWidth,
                    height: window.innerHeight
                });
            }
        };
        _this.state = {
            stage: _this.props.stage || windowStage.DEFAULT,
            isDragging: false,
            top: _this.getInitialTop(),
            left: _this.getInitialLeft(),
            width: _this.getInitialWidth(),
            height: _this.getInitialHeight()
        };
        _this.windowCoordinatesState = {
            leftBeforeAction: _this.getInitialLeft(),
            topBeforeAction: _this.getInitialTop(),
            widthBeforeAction: _this.getInitialWidth(),
            heightBeforeAction: _this.getInitialHeight()
        };
        return _this;
    }
    /**
     * @hidden
     */
    Window.prototype.componentDidMount = function () {
        if (window) {
            window.addEventListener('resize', this.handleBrowserWindowResize);
        }
    };
    /**
     * @hidden
     */
    Window.prototype.componentWillUnmount = function () {
        if (window) {
            window.removeEventListener('resize', this.handleBrowserWindowResize);
        }
    };
    /**
     * @hidden
     */
    Window.prototype.render = function () {
        var _this = this;
        var classNamesWindow = classNames('k-widget', 'k-window', 'k-window-wrapper', {
            'k-window-minimized': this.state.stage === 'MINIMIZED'
        });
        return (React.createElement(React.Fragment, null,
            this.props.modal && React.createElement("div", { className: "k-overlay" }),
            React.createElement("div", { tabIndex: 0, onFocus: function (e) { return e.target.classList.add('k-state-focused'); }, onBlur: function (e) { return e.target.classList.remove('k-state-focused'); }, onKeyDown: this.handleKeyDown, ref: (function (el) { return _this.windowElement = el; }), className: classNamesWindow, style: __assign({ top: this.top, left: this.left, width: this.width, height: this.height || '' }, this.props.style) },
                React.createElement(MiddleLayerOptimization, { shouldUpdateOnDrag: this.props.shouldUpdateOnDrag || false, isDragging: this.state.isDragging },
                    React.createElement(Draggable, { onPress: this.onPress, onDrag: this.onDrag, onRelease: this.onRelease, ref: function (component) { return _this.draggable = component; } },
                        React.createElement(WindowTitleBar, { stage: this.windowStage, onDoubleClick: this.props.doubleClickStageChange ? this.handleDoubleClick : undefined, onMinimizeButtonClick: this.handleMinimize, onFullScreenButtonClick: this.handleFullscreen, onRestoreButtonClick: this.handleRestore, onCloseButtonClick: this.handleCloseWindow, closeButton: this.props.closeButton, minimizeButton: this.props.minimizeButton, maximizeButton: this.props.maximizeButton, restoreButton: this.props.restoreButton }, this.props.title)),
                    this.windowStage !== windowStage.MINIMIZED
                        ? React.createElement("div", { className: "k-content k-window-content" }, this.props.children)
                        : null,
                    this.windowStage === windowStage.DEFAULT &&
                        this.props.resizable
                        ? React.createElement(ResizeHandlers, { onResize: this.handleResize })
                        : null))));
    };
    Object.defineProperty(Window.prototype, "top", {
        // Getters
        get: function () {
            if (this.windowStage !== windowStage.FULLSCREEN) {
                return Math.max(this.props.top || this.state.top, 0);
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Window.prototype, "left", {
        get: function () {
            if (this.windowStage !== windowStage.FULLSCREEN) {
                return Math.max(this.props.left || this.state.left, 0);
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Window.prototype, "width", {
        get: function () {
            var width = this.props.width || this.state.width;
            if (this.windowStage === windowStage.FULLSCREEN) {
                width = window.innerWidth;
            }
            return width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Window.prototype, "height", {
        get: function () {
            var height = this.props.height || this.state.height;
            if (this.windowStage === windowStage.FULLSCREEN) {
                height = window.innerHeight;
            }
            else if (this.windowStage === windowStage.MINIMIZED) {
                height = 0;
            }
            return height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Window.prototype, "windowStage", {
        get: function () {
            return this.props.stage || this.state.stage;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    Window.propTypes = {
        id: PropTypes.string,
        width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        left: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        top: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        initialwidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        initialHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        initialLeft: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        initialTop: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        minWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        minHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        resizable: PropTypes.bool,
        draggable: PropTypes.bool,
        title: PropTypes.any,
        shouldUpdateOnDrag: PropTypes.bool,
        stage: PropTypes.oneOf(['DEFAULT', 'MINIMIZED', 'FULLSCREEN'])
    };
    /**
     * @hidden
     */
    Window.defaultProps = {
        minWidth: DEFAULT_MIN_WIDTH,
        minHeight: DEFAULT_MIN_HEIGHT,
        resizable: true,
        draggable: true,
        modal: false,
        doubleClickStageChange: true
    };
    return Window;
}(React.Component));
export { Window };
//# sourceMappingURL=Window.js.map