"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ChartContext_1 = require("../../ChartContext");
/**
 * @hidden
 */
var CollectionConfigurationComponent = /** @class */ (function (_super) {
    __extends(CollectionConfigurationComponent, _super);
    function CollectionConfigurationComponent(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.optionsStore = context.optionsStore;
        return _this;
    }
    CollectionConfigurationComponent.prototype.renderChildren = function (child, index) {
        var children = child.props.children;
        var _a = this.props, _chartKey = _a._chartKey, _parentStore = _a._parentStore;
        var collectionItemProps = __assign({}, child.props, { _chartCollectionIdxKey: _chartKey + "_" + index, _parentStore: _parentStore });
        return React.cloneElement(child, collectionItemProps, children);
    };
    CollectionConfigurationComponent.prototype.render = function () {
        var _this = this;
        var _a = this.props, _chartKey = _a._chartKey, _parentStore = _a._parentStore, children = _a.children;
        var store = _parentStore || this.optionsStore;
        store.dispatch({
            chartKey: _chartKey,
            payload: []
        });
        return React.Children.map(children, function (child, index) {
            if (React.isValidElement(child)) {
                return _this.renderChildren(child, index);
            }
            return child;
        });
    };
    CollectionConfigurationComponent.contextType = ChartContext_1.ChartContext;
    return CollectionConfigurationComponent;
}(React.Component));
exports.default = CollectionConfigurationComponent;
//# sourceMappingURL=CollectionConfigurationComponent.js.map