var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import { BaseChart } from './BaseChart';
import { DonutCenter } from './DonutCenter';
import { Chart as KendoChart } from '@progress/kendo-charts';
/**
 * Represents the [KendoReact Chart component]({% slug overview_chart_charts %}).
 *
 * @example
 * ```jsx
 * import {
 *     Chart,
 *     ChartSeries,
 *     ChartSeriesItem,
 *     ChartCategoryAxis,
 *     ChartCategoryAxisItem,
 *     ChartTitle,
 *     ChartLegend
 * } from '@progress/kendo-react-charts';
 *
 * const categories = [ 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 ];
 * const series = [ {
 *     name: 'India',
 *     data: [ 3.907, 7.943, 7.848, 9.284, 9.263, 9.801, 3.890, 8.238, 9.552, 6.855 ]
 * }, {
 *     name: 'Russian Federation',
 *     data: [ 4.743, 7.295, 7.175, 6.376, 8.153, 8.535, 5.247, -7.832, 4.3, 4.3 ]
 * }, {
 *     name: 'Germany',
 *     data: [ 0.010, -0.375, 1.161, 0.684, 3.7, 3.269, 1.083, -5.127, 3.690, 2.995 ]
 * }, {
 *     name: 'World',
 *     data: [ 1.988, 2.733, 3.994, 3.464, 4.001, 3.939, 1.333, -2.245, 4.339, 2.727 ]
 * } ];
 *
 * const ChartContainer = () => (
 *     <Chart>
 *         <ChartTitle text="Gross domestic product growth GDP annual" />
 *         <ChartLegend position="top" orientation="horizontal" />
 *         <ChartCategoryAxis>
 *             <ChartCategoryAxisItem categories={categories} startAngle={45} />
 *         </ChartCategoryAxis>
 *         <ChartSeries>
 *             {series.map((item, idx) => (
 *                 <ChartSeriesItem
 *                     key={idx}
 *                     type="column"
 *                     data={item.data}
 *                     name={item.name}
 *                 />))}
 *         </ChartSeries>
 *     </Chart>
 * );
 *
 * ReactDOM.render(
 *     <ChartContainer />,
 *     document.querySelector('my-app')
 * );
 * ```
 */
var Chart = /** @class */ (function (_super) {
    __extends(Chart, _super);
    function Chart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getTarget = function () {
            return _this;
        };
        return _this;
    }
    Object.defineProperty(Chart.prototype, "chartInstance", {
        /**
         * @hidden
         */
        get: function () {
            if (this._baseChart !== null) {
                return this._baseChart.chartInstance;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Chart.prototype, "surface", {
        /**
         * The Drawing `Surface` of the Chart.
         */
        get: function () {
            if (this._baseChart !== null) {
                return this._baseChart.surface;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Chart.prototype, "element", {
        /**
         * The DOM element of the Chart.
         */
        get: function () {
            if (this._baseChart !== null) {
                return this._baseChart.element;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    Chart.prototype.render = function () {
        var _this = this;
        var _a = this.props, donutCenterRender = _a.donutCenterRender, children = _a.children, baseChartProps = __rest(_a, ["donutCenterRender", "children"]);
        return (React.createElement(BaseChart, __assign({}, baseChartProps, { ref: function (baseChart) { return _this._baseChart = baseChart; }, chartConstructor: KendoChart, getTarget: this.getTarget, wrapper: "div", wrapperClassName: "k-chart k-widget" }),
            children,
            React.createElement(DonutCenter, { render: donutCenterRender })));
    };
    return Chart;
}(React.Component));
export { Chart };
//# sourceMappingURL=Chart.js.map