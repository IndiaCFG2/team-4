/**
 * @hidden
 */
var optionsReducer = function (currentState, action) {
    if (action.chartCollectionIdxKey) {
        return reducers.collectionConfigurationItem(currentState, action);
    }
    else if (action.chartKey) {
        return reducers.configurationItem(currentState, action);
    }
    else {
        return {};
    }
};
/**
 * @hidden
 */
var themeReducer = function (currentState, action) {
    if (action.type) {
        switch (action.type) {
            case 'set':
                return reducers.themeItem(currentState, action);
            case 'push':
                return Object.assign(currentState, action.payload);
            default:
                return currentState;
        }
    }
    else {
        return {};
    }
};
/**
 * @hidden
 */
var observersReducer = function (currentState, action) {
    if (action.type) {
        switch (action.type) {
            case 'add':
                return currentState.concat([action.payload]);
            case 'remove':
                return currentState.filter(function (element) { return element !== action.payload; });
            default:
                return currentState;
        }
    }
    else {
        return [];
    }
};
/**
 * @hidden
 */
var reducers = {
    configurationItem: function (currentState, action) {
        var _a;
        return Object.assign(currentState, (_a = {},
            _a[action.chartKey] = action.payload,
            _a));
    },
    collectionConfigurationItem: function (currentState, action) {
        var _a;
        var inCollection = false;
        var _b = action.chartCollectionIdxKey.split('_'), collectionName = _b[0], collectionIdx = _b[1];
        var collection = currentState[collectionName].map(function (item, index) {
            if (parseInt(collectionIdx, 10) === index) {
                inCollection = true;
                return action.payload;
            }
            return item;
        });
        if (inCollection === false) {
            collection.splice(parseInt(collectionIdx, 10), 0, action.payload);
        }
        return Object.assign(currentState, (_a = {},
            _a[collectionName] = collection,
            _a));
    },
    themeItem: function (currentState, action) {
        var store = {};
        var nextStore = Object.assign(store, currentState);
        var _a = action.payload, field = _a.field, value = _a.value;
        var parts = field.split('.');
        var key = parts.shift();
        while (parts.length > 0) {
            store = store[key] = store[key] || {};
            key = parts.shift();
        }
        store[key] = value;
        return nextStore;
    }
};
export { optionsReducer, themeReducer, observersReducer };
//# sourceMappingURL=reducer.js.map