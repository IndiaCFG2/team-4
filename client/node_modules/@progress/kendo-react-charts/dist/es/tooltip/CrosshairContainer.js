var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { Container } from './../Container';
import { CrosshairTooltip } from './Crosshair';
import { ChartContext } from '../ChartContext';
var AXES = ['categoryAxis', 'valueAxis', 'xAxis', 'yAxis'];
function mapTooltips(options) {
    var map = {};
    for (var idx = 0; idx < AXES.length; idx++) {
        var tooltips = axesCrosshairTooltipOptions(options, AXES[idx]);
        for (var tooltipIdx = 0; tooltipIdx < tooltips.length; tooltipIdx++) {
            var tooltip = tooltips[tooltipIdx];
            map[tooltip.name + tooltip.index] = tooltip;
        }
    }
    return map;
}
function axesCrosshairTooltipOptions(options, name) {
    var result = [];
    if (options[name]) {
        var axes = [].concat(options[name]);
        for (var idx = 0; idx < axes.length; idx++) {
            var tooltip = (axes[idx].crosshair || {}).tooltip;
            if (tooltip && tooltip.visible) {
                result.push({
                    index: idx,
                    name: name
                });
            }
        }
    }
    return result;
}
/**
 * @hidden
 */
var CrosshairTooltipContainer = /** @class */ (function (_super) {
    __extends(CrosshairTooltipContainer, _super);
    function CrosshairTooltipContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            tooltips: {}
        };
        _this.storeUnsubscriber = Function.prototype;
        _this.subscriber = function () {
            _this.setState({
                tooltips: mapTooltips(_this.context.optionsStore.getState())
            });
        };
        return _this;
    }
    CrosshairTooltipContainer.prototype.componentDidMount = function () {
        // This is moved here as calls to the listed methods contains setState which is restricted before component mount
        this.storeUnsubscriber = this.context.optionsStore.subscribe(this.subscriber);
    };
    CrosshairTooltipContainer.prototype.render = function () {
        var tooltips = this.state.tooltips;
        var childrenMap = Object.keys(tooltips).map(function (key) { return (React.createElement(CrosshairTooltip, __assign({}, tooltips[key], { key: key }))); });
        return React.createElement(Container, null, childrenMap);
    };
    CrosshairTooltipContainer.prototype.componentWillUnmount = function () {
        this.storeUnsubscriber();
    };
    CrosshairTooltipContainer.contextType = ChartContext;
    return CrosshairTooltipContainer;
}(React.Component));
export { CrosshairTooltipContainer };
//# sourceMappingURL=CrosshairContainer.js.map