var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import { classNames } from '@progress/kendo-react-common';
import { InstanceObserver } from '@progress/kendo-charts';
import { TooltipPoint } from './Point';
import { SharedTooltipContent } from './SharedTooltipContent';
import { TooltipPopup } from './Popup';
import { ChartContext } from '../ChartContext';
var SHARED_TOOLTIP_CLASS = 'k-chart-shared-tooltip';
var INVERSE_TOOLTIP_CLASS = 'k-chart-tooltip-inverse';
/**
 * @hidden
 */
var SeriesTooltip = /** @class */ (function (_super) {
    __extends(SeriesTooltip, _super);
    function SeriesTooltip() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            popupShown: false
        };
        return _this;
    }
    SeriesTooltip.prototype.componentDidMount = function () {
        // This is moved here as calls to the listed methods contains setState which is restricted before component mount
        this.chartObserver = new InstanceObserver(this, {
            showTooltip: 'onShowTooltip',
            hideTooltip: 'onHideTooltip'
        });
        this.context.observersStore.dispatch({
            type: 'add',
            payload: this.chartObserver
        });
    };
    SeriesTooltip.prototype.render = function () {
        var _this = this;
        var _a;
        var _b = this.state, popupContext = _b.popupContext, shared = _b.shared, className = _b.className, tooltipProps = __rest(_b, ["popupContext", "shared", "className"]);
        var tooltipContent = this.state.popupShown ? function () {
            var render = _this.findRenderFunction();
            if (shared) {
                return render !== null ? render(popupContext) :
                    (React.createElement(SharedTooltipContent, __assign({}, popupContext)));
            }
            else {
                var point = popupContext.point;
                var seriesRenderer = _this.findRenderFunctionByIndex(point.series.index);
                if (seriesRenderer !== null) {
                    return seriesRenderer(popupContext);
                }
                else if (render !== null) {
                    return render(popupContext);
                }
                else {
                    return (React.createElement("span", { dangerouslySetInnerHTML: { __html: popupContext.point.formattedValue } }));
                }
            }
        } : Function.prototype;
        var popupContainerClassName = classNames((_a = {},
            _a[SHARED_TOOLTIP_CLASS] = shared,
            _a[INVERSE_TOOLTIP_CLASS] = !!className,
            _a));
        return (React.createElement(TooltipPopup, __assign({}, tooltipProps, { popupContent: tooltipContent, className: popupContainerClassName })));
    };
    SeriesTooltip.prototype.componentWillUnmount = function () {
        this.context.observersStore.dispatch({
            type: 'remove',
            payload: this.chartObserver
        });
    };
    SeriesTooltip.prototype.onShowTooltip = function (e) {
        var anchor = e.anchor, style = e.style, shared = e.shared, className = e.className, crosshair = e.crosshair;
        var context;
        if (crosshair) {
            return;
        }
        if (shared) {
            context = this.createSharedTooltipContext(e);
        }
        else {
            context = this.createTooltipContext(e);
        }
        this.setState({
            popupShown: true,
            popupAlign: anchor.align,
            popupOffset: anchor.point,
            popupContext: context,
            popupStyles: style,
            className: className,
            shared: shared
        });
    };
    SeriesTooltip.prototype.onHideTooltip = function () {
        this.setState({
            popupShown: false,
            popupStyles: {},
            className: undefined
        });
    };
    SeriesTooltip.prototype.createSharedTooltipContext = function (e) {
        var points = e.points, categoryText = e.categoryText;
        var nameColumn = points.filter(function (point) { return typeof point.series.name !== 'undefined'; }).length > 0;
        var colorMarker = e.series.length > 1;
        var colspan = 1;
        if (nameColumn) {
            colspan++;
        }
        if (colorMarker) {
            colspan++;
        }
        return {
            categoryText: categoryText,
            colorMarker: colorMarker,
            colspan: colspan,
            nameColumn: nameColumn,
            points: e.points.map(function (point) { return new TooltipPoint(point, e.format); })
        };
    };
    SeriesTooltip.prototype.createTooltipContext = function (e) {
        var point = e.point, format = e.format;
        return { point: new TooltipPoint(point, format) };
    };
    SeriesTooltip.prototype.findRenderFunctionByIndex = function (seriesIdx) {
        var series = this.context.optionsStore.getState().series;
        if (series !== undefined
            && Array.isArray(series)
            && series[seriesIdx] !== undefined
            && series[seriesIdx].hasOwnProperty('tooltip')
            && series[seriesIdx].tooltip.hasOwnProperty('render')) {
            return series[seriesIdx].tooltip.render;
        }
        return null;
    };
    SeriesTooltip.prototype.findRenderFunction = function () {
        var tooltip = this.context.optionsStore.getState().tooltip;
        if (tooltip !== undefined
            && tooltip.hasOwnProperty('render')) {
            return tooltip.render;
        }
        return null;
    };
    SeriesTooltip.contextType = ChartContext;
    return SeriesTooltip;
}(React.Component));
export { SeriesTooltip };
//# sourceMappingURL=Series.js.map