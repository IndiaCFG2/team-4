var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import { classNames } from '@progress/kendo-react-common';
import { InstanceObserver } from '@progress/kendo-charts';
import { TooltipPopup } from './Popup';
import { ChartContext } from '../ChartContext';
var CROSSHAIR_TOOLTIP_CLASS = 'k-chart-crosshair-tooltip';
var INVERSE_TOOLTIP_CLASS = 'k-chart-tooltip-inverse';
/**
 * @hidden
 */
var CrosshairTooltip = /** @class */ (function (_super) {
    __extends(CrosshairTooltip, _super);
    function CrosshairTooltip(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.state = {
            popupShown: false
        };
        _this.chartObserver = new InstanceObserver(_this, {
            showTooltip: 'onShowTooltip',
            hideTooltip: 'onHideTooltip'
        });
        context.observersStore.dispatch({
            type: 'add',
            payload: _this.chartObserver
        });
        return _this;
    }
    CrosshairTooltip.prototype.render = function () {
        var _a;
        var _b = this.state, popupContend = _b.popupContend, className = _b.className, tooltipProps = __rest(_b, ["popupContend", "className"]);
        var tooltipContent = this.state.popupShown ? function () { return popupContend; } : Function.prototype;
        var popupContainerClassName = classNames((_a = {},
            _a[CROSSHAIR_TOOLTIP_CLASS] = true,
            _a[INVERSE_TOOLTIP_CLASS] = !!className,
            _a));
        return (React.createElement(TooltipPopup, __assign({}, tooltipProps, { popupContent: tooltipContent, className: popupContainerClassName })));
    };
    CrosshairTooltip.prototype.componentWillUnmount = function () {
        this.context.observersStore.dispatch({
            type: 'remove',
            payload: this.chartObserver
        });
    };
    CrosshairTooltip.prototype.onShowTooltip = function (e) {
        var anchor = e.anchor, style = e.style, className = e.className, crosshair = e.crosshair, axisName = e.axisName, axisIndex = e.axisIndex, value = e.value;
        var _a = this.props, name = _a.name, index = _a.index;
        if (!crosshair) {
            return;
        }
        if (axisName === name && axisIndex === index) {
            this.setState({
                popupShown: true,
                popupAlign: anchor.align,
                popupOffset: anchor.point,
                popupContend: value,
                popupStyles: style,
                className: className
            });
        }
    };
    CrosshairTooltip.prototype.onHideTooltip = function () {
        this.setState({
            popupShown: false,
            popupStyles: {},
            className: undefined
        });
    };
    CrosshairTooltip.contextType = ChartContext;
    return CrosshairTooltip;
}(React.Component));
export { CrosshairTooltip };
//# sourceMappingURL=Crosshair.js.map