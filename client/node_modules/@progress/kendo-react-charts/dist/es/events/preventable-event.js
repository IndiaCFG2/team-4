var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { BaseEvent } from './base-event';
/**
 * @hidden
 */
var PreventableEvent = /** @class */ (function (_super) {
    __extends(PreventableEvent, _super);
    function PreventableEvent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.prevented = false;
        return _this;
    }
    // tslint:disable:max-line-length
    /**
     * Prevents the default action for a specified event. In this way, the source component suppresses the built-in behavior that follows the event.
     */
    PreventableEvent.prototype.preventDefault = function () {
        this.prevented = true;
    };
    /**
     * Returns `true` if the event was prevented by any of its subscribers.
     *
     * @returns `true` if the default action was prevented.
     * Otherwise, returns `false`.
     */
    PreventableEvent.prototype.isDefaultPrevented = function () {
        return this.prevented;
    };
    return PreventableEvent;
}(BaseEvent));
export { PreventableEvent };
// tslint:enable:max-line-length
//# sourceMappingURL=preventable-event.js.map