"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var TabStripNavigation_1 = require("./TabStripNavigation");
var TabStripContent_1 = require("./TabStripContent");
var kendo_react_common_1 = require("@progress/kendo-react-common");
// tslint:enable:max-line-length
var TabStrip = /** @class */ (function (_super) {
    __extends(TabStrip, _super);
    function TabStrip() {
        var _a;
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._element = null;
        _this.keyBinding = (_a = {},
            _a[kendo_react_common_1.Keys.left] = function () { return _this.prevNavigatableTab(); },
            _a[kendo_react_common_1.Keys.right] = function () { return _this.nextNavigatableTab(); },
            _a[kendo_react_common_1.Keys.down] = function () { return _this.nextNavigatableTab(); },
            _a[kendo_react_common_1.Keys.up] = function () { return _this.prevNavigatableTab(); },
            _a[kendo_react_common_1.Keys.home] = function () { return 0; },
            _a[kendo_react_common_1.Keys.end] = function () { return (React.Children.count(_this.props.children) - 1); },
            _a);
        /**
         * @hidden
         */
        _this.onSelect = function (index) {
            if (_this.props.selected !== index) {
                if (_this.props.onSelect) {
                    _this.props.onSelect({
                        selected: index
                    });
                }
            }
        };
        /**
         * @hidden
         */
        _this.onKeyDown = function (event) {
            var handler;
            switch (event.keyCode) {
                case kendo_react_common_1.Keys.left:
                    handler = _this.keyBinding[_this.invertKeys(kendo_react_common_1.Keys.left, kendo_react_common_1.Keys.right)];
                    break;
                case kendo_react_common_1.Keys.right:
                    handler = _this.keyBinding[_this.invertKeys(kendo_react_common_1.Keys.right, kendo_react_common_1.Keys.left)];
                    break;
                case kendo_react_common_1.Keys.up:
                    handler = _this.keyBinding[kendo_react_common_1.Keys.up];
                    break;
                case kendo_react_common_1.Keys.down:
                    handler = _this.keyBinding[kendo_react_common_1.Keys.down];
                    break;
                default:
                    break;
            }
            if (handler) {
                event.preventDefault();
                _this.onSelect(handler());
            }
        };
        _this.renderContent = function (tabProps) {
            var selected = tabProps.selected, children = tabProps.children, tabContentStyle = tabProps.tabContentStyle;
            var childrenCount = React.Children.count(children);
            if (selected < childrenCount && selected > -1) {
                return (React.createElement(TabStripContent_1.default, __assign({ index: selected }, tabProps, { style: tabContentStyle })));
            }
            return null;
        };
        _this.firstNavigatableTab = function () {
            var children = _this.children();
            var length = React.Children.count(children);
            if (children) {
                for (var i = 0; i < length; i++) {
                    if (!children[i].props.disabled) {
                        return i;
                    }
                }
            }
        };
        _this.lastNavigatableTab = function () {
            var children = _this.children();
            var length = React.Children.count(children);
            if (children) {
                for (var i = length - 1; i > 0; i--) {
                    if (!children[i].props.disabled) {
                        return i;
                    }
                }
            }
        };
        _this.prevNavigatableTab = function () {
            var children = _this.children();
            var selected = _this.props.selected;
            var index = selected ? selected - 1 : -1;
            if (index < 0) {
                return _this.lastNavigatableTab();
            }
            if (children) {
                for (var i = index; i > -1; i--) {
                    if (!children[i].props.disabled) {
                        return i;
                    }
                    if (i === 0) {
                        return _this.lastNavigatableTab();
                    }
                }
            }
        };
        _this.nextNavigatableTab = function () {
            var children = _this.children();
            var selected = _this.props.selected;
            var index = selected ? selected + 1 : 1;
            var childrenCount = React.Children.count(children);
            if (index >= childrenCount) {
                return _this.firstNavigatableTab();
            }
            if (children) {
                for (var i = index; i < childrenCount; i++) {
                    if (!children[i].props.disabled) {
                        return i;
                    }
                    if (i + 1 === childrenCount) {
                        return _this.firstNavigatableTab();
                    }
                }
            }
        };
        return _this;
    }
    /**
     * @hidden
     */
    TabStrip.prototype.render = function () {
        var _this = this;
        var _a;
        var tabProps = __assign({}, this.props, { children: this.children(), onKeyDown: this.onKeyDown, onSelect: this.onSelect });
        var tabPosition = tabProps.tabPosition, _b = tabProps.tabIndex, tabIndex = _b === void 0 ? 0 : _b;
        var bottom = tabPosition === 'bottom';
        var componentClasses = kendo_react_common_1.classNames('k-widget', 'k-header', 'k-floatwrap', 'k-tabstrip', (_a = {},
            _a['k-tabstrip-left'] = tabPosition === 'left',
            _a['k-tabstrip-right'] = tabPosition === 'right',
            _a['k-tabstrip-bottom'] = tabPosition === 'bottom',
            _a['k-tabstrip-top'] = tabPosition === 'top',
            _a), this.props.className);
        return (React.createElement("div", { ref: function (div) { return _this._element = div; }, dir: this.props.dir, className: componentClasses, style: this.props.style },
            !bottom && React.createElement(TabStripNavigation_1.default, __assign({}, tabProps, { tabIndex: tabIndex })),
            this.renderContent(tabProps),
            bottom && React.createElement(TabStripNavigation_1.default, __assign({}, tabProps, { tabIndex: tabIndex }))));
    };
    TabStrip.prototype.invertKeys = function (original, inverted) {
        var rtl = this._element && (getComputedStyle(this._element).direction === 'rtl') || false;
        return rtl ? inverted : original;
    };
    TabStrip.prototype.children = function () {
        return React.Children.toArray(this.props.children).filter(function (c) { return c; });
    };
    /**
     * @hidden
     */
    TabStrip.propTypes = {
        animation: PropTypes.bool,
        children: PropTypes.node,
        onSelect: PropTypes.func,
        selected: PropTypes.number,
        style: PropTypes.object,
        tabContentStyle: PropTypes.object,
        tabPosition: PropTypes.string,
        tabIndex: PropTypes.number,
        className: PropTypes.string,
        dir: PropTypes.string
    };
    /**
     * @hidden
     */
    TabStrip.defaultProps = {
        animation: true,
        tabPosition: 'top',
        keepTabsMounted: false
    };
    return TabStrip;
}(React.Component));
exports.default = TabStrip;
//# sourceMappingURL=TabStrip.js.map