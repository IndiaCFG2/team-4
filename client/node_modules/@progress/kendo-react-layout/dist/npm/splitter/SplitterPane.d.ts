import * as React from 'react';
/**
 * Represents the pane options of the Splitter.
 */
export interface SplitterPaneProps {
    /**
     * Sets the size of the pane ([see example]({% slug panes_splitter %}#toc-dimensions)). Has to be between the `min` and `max` properties.
     */
    size?: string;
    /**
     * Sets the minimum possible size of the pane ([see example]({% slug panes_splitter %}#toc-dimensions)).
     */
    min?: string;
    /**
     * Sets the maximum possible size of the pane ([see example]({% slug panes_splitter %}#toc-dimensions)).
     */
    max?: string;
    /**
     * Specifies if the user is allowed to resize the pane and provide space for other panes ([see example]({% slug panes_splitter %}#toc-resizing)). If `resizable` is not specified, the resizing of the pane will be enabled.
     */
    resizable?: boolean;
    /**
     * Specifies if the user is allowed to hide the pane and provide space for other panes ([see example]({% slug panes_splitter %}#toc-collapsing)).
     */
    collapsible?: boolean;
    /**
     * Specifies the pane collapsed state ([see example]({% slug panes_splitter %}#toc-collapsing)).
     */
    collapsed?: boolean;
    /**
     * Specifies if overflowing content is scrollable or hidden ([see example]({% slug panes_splitter %}#toc-scrolling)). If `scrollable` is not specified, the content will be scrollable.
     */
    scrollable?: boolean;
    /**
     * Specifies if the children of the pane should be mounted when it's in collapsed state.
     */
    keepMounted?: boolean;
}
/**
 * @hidden
 */
export interface SplitterPaneExtendedProps extends SplitterPaneProps {
    orientation: 'vertical' | 'horizontal';
    overlay: boolean;
    containsSplitter: boolean;
}
/**
 * @hidden
 */
export declare class SplitterPane extends React.Component<SplitterPaneExtendedProps, {}> {
    render(): JSX.Element;
}
