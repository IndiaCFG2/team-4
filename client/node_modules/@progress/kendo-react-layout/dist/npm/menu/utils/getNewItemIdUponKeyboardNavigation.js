"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var kendo_react_common_1 = require("@progress/kendo-react-common");
var itemsIdsUtils_1 = require("./itemsIdsUtils");
var NO_WHITESPACE_REGEX = /\S/;
/**
 * @hidden
 * Returns the `itemId` (string) for applicable key codes even when the id has not changed.
 * For key codes that are not applicable, returns `undefined`.
 */
function getNewItemIdUponKeyboardNavigation(sourceItems, sourceItemId, keyCode, key, isMenuVertical, isDirectionRightToLeft) {
    var sourceItem = getItemById();
    switch (keyCode) {
        case kendo_react_common_1.Keys.left:
            return getIdUponLeftKey();
        case kendo_react_common_1.Keys.right:
            return getIdUponRightKey();
        case kendo_react_common_1.Keys.up:
            return getIdUponUpKey();
        case kendo_react_common_1.Keys.down:
            return getIdUponDownKey();
        case kendo_react_common_1.Keys.enter:
        case kendo_react_common_1.Keys.space:
            return getIdUponEnterAndSpaceKeys();
        case kendo_react_common_1.Keys.home:
            return getIdUponHomeKey();
        case kendo_react_common_1.Keys.end:
            return getIdUponEndKey();
        case kendo_react_common_1.Keys.esc:
            return getIdUponEscKey();
        default:
            return isSearchableKey() ? getIdUponSearchByChar() : sourceItemId;
    }
    function getIdUponLeftKey() {
        if (isMenuVertical) {
            return isDirectionRightToLeft ? getIdUponRightKeyForVerticalMenu() : getIdUponLeftKeyForVerticalMenu();
        }
        else {
            return isDirectionRightToLeft ?
                getIdUponRightKeyForHorizontalMenu() : getIdUponLeftKeyForHorizontalMenu();
        }
    }
    function getIdUponRightKey() {
        if (isMenuVertical) {
            return isDirectionRightToLeft ? getIdUponLeftKeyForVerticalMenu() : getIdUponRightKeyForVerticalMenu();
        }
        else {
            return isDirectionRightToLeft ?
                getIdUponLeftKeyForHorizontalMenu() : getIdUponRightKeyForHorizontalMenu();
        }
    }
    function getIdUponDownKey() {
        if (isMenuVertical) {
            return getNextSiblingId();
        }
        else {
            if (itemsIdsUtils_1.isIdZeroLevel(sourceItemId)) {
                return getFirstChildIdForEnabledItemOrGetSameId();
            }
            else {
                return getNextSiblingId();
            }
        }
    }
    function getIdUponUpKey() {
        if (isMenuVertical) {
            return getPrevSiblingId();
        }
        else {
            if (itemsIdsUtils_1.isIdZeroLevel(sourceItemId)) {
                return getLastChildIdForEnabledItemOrGetSameId();
            }
            else {
                return getPrevSiblingId();
            }
        }
    }
    function getIdUponEnterAndSpaceKeys() {
        if (sourceItem.disabled) {
            return sourceItemId;
        }
        else {
            return hasChildren() ? itemsIdsUtils_1.getFirstChildId(sourceItemId) : itemsIdsUtils_1.getRootParentId(sourceItemId);
        }
    }
    function getIdUponHomeKey() {
        return getSiblings()[0].id;
    }
    function getIdUponEndKey() {
        var siblings = getSiblings();
        return siblings[siblings.length - 1].id;
    }
    function getIdUponEscKey() {
        return itemsIdsUtils_1.isIdZeroLevel(sourceItemId) ? sourceItemId : itemsIdsUtils_1.getDirectParentId(sourceItemId);
    }
    function getIdUponSearchByChar() {
        var searchChar = key.toLowerCase();
        var siblings = getSiblings();
        var currentItemIndex = Number(itemsIdsUtils_1.getShortId(sourceItemId));
        var itemsToSearch = siblings.slice(currentItemIndex + 1).concat(siblings.slice(0, currentItemIndex + 1));
        var matchedSibling = itemsToSearch.find(function (item) {
            return (item.text || '').toLowerCase().startsWith(searchChar);
        });
        return matchedSibling ? matchedSibling.id : sourceItemId;
    }
    //#region Left Key Internals
    function getIdUponLeftKeyForHorizontalMenu() {
        if (itemsIdsUtils_1.isIdZeroLevel(sourceItemId)) {
            return getPrevSiblingId();
        }
        else if (itemsIdsUtils_1.isIdFirstLevel(sourceItemId)) {
            return getFirstChildIdForEnabledItemOrGetSameId(getPrevSiblingId(itemsIdsUtils_1.getRootParentId(sourceItemId)));
        }
        else {
            return itemsIdsUtils_1.getDirectParentId(sourceItemId);
        }
    }
    function getIdUponLeftKeyForVerticalMenu() {
        if (itemsIdsUtils_1.isIdZeroLevel(sourceItemId)) {
            return getLastChildIdForEnabledItemOrGetSameId();
        }
        else {
            return itemsIdsUtils_1.getDirectParentId(sourceItemId);
        }
    }
    //#endregion
    //#region Right Key Internals
    function getIdUponRightKeyForHorizontalMenu() {
        if (itemsIdsUtils_1.isIdZeroLevel(sourceItemId)) {
            return getNextSiblingId();
        }
        else {
            return getFirstChildIdForEnabledItemOrGetSameId(hasChildren() ? sourceItemId : getNextSiblingId(itemsIdsUtils_1.getRootParentId(sourceItemId)));
        }
    }
    function getIdUponRightKeyForVerticalMenu() {
        return getFirstChildIdForEnabledItemOrGetSameId(itemsIdsUtils_1.isIdZeroLevel(sourceItemId) || hasChildren() ?
            sourceItemId : getNextSiblingId(itemsIdsUtils_1.getRootParentId(sourceItemId)));
    }
    //#endregion
    //#region Utils
    function getFirstChildIdForEnabledItemOrGetSameId(itemId) {
        return getFirstOrLastChildIdForEnabledItemOrGetSameId(true, itemId);
    }
    function getLastChildIdForEnabledItemOrGetSameId(itemId) {
        return getFirstOrLastChildIdForEnabledItemOrGetSameId(false, itemId);
    }
    function isSearchableKey() {
        return key.length === 1 && NO_WHITESPACE_REGEX.test(key);
    }
    function getItemById(itemId, items) {
        if (itemId === undefined) {
            itemId = sourceItemId;
        }
        if (items === undefined) {
            items = sourceItems;
        }
        return itemsIdsUtils_1.getItemById(itemId, items);
    }
    function hasChildren(itemId) {
        return getItemById(itemId).items.length > 0;
    }
    function getPrevSiblingId(itemId) {
        return getSiblingId(false, itemId);
    }
    function getNextSiblingId(itemId) {
        return getSiblingId(true, itemId);
    }
    function getLastChildId(itemId) {
        var itemChildren = getItemById(itemId).items;
        return itemChildren[itemChildren.length - 1].id;
    }
    function getSiblings() {
        return itemsIdsUtils_1.isIdZeroLevel(sourceItemId) ?
            sourceItems : getItemById(itemsIdsUtils_1.getDirectParentId(sourceItemId), sourceItems).items;
    }
    function getFirstOrLastChildIdForEnabledItemOrGetSameId(getFirstChild, itemId) {
        if (itemId === undefined) {
            itemId = sourceItemId;
        }
        var item = getItemById(itemId);
        if (hasChildren(itemId) && !item.disabled) {
            return getFirstChild ? itemsIdsUtils_1.getFirstChildId(itemId) : getLastChildId(itemId);
        }
        else {
            return itemId;
        }
    }
    function getSiblingId(next, itemId) {
        if (itemId === undefined) {
            itemId = sourceItemId;
        }
        if (itemsIdsUtils_1.isIdZeroLevel(itemId)) {
            return itemsIdsUtils_1.getDirectSiblingIdForLevelZero(next, itemId, sourceItems.length);
        }
        else {
            var directParentId = itemsIdsUtils_1.getDirectParentId(itemId);
            var shortId = itemsIdsUtils_1.getShortId(itemId);
            var siblingsCount = getItemById(directParentId).items.length;
            return itemsIdsUtils_1.createId(itemsIdsUtils_1.getDirectSiblingIdForLevelZero(next, shortId, siblingsCount), directParentId);
        }
    }
    //#endregion
}
exports.default = getNewItemIdUponKeyboardNavigation;
//# sourceMappingURL=getNewItemIdUponKeyboardNavigation.js.map