import * as React from 'react';
import * as PropTypes from 'prop-types';
import { PanelBarItemProps } from './PanelBarItem';
import { PanelBarInterface, PanelBarItemClickEventArguments } from './PanelBarInterface';
import { NavigationAction } from './services/navigationService';
/**
 * Represents the props of the [KendoReact PanelBar component]({% slug overview_panelbar %}).
 */
export interface PanelBarProps extends PanelBarInterface {
    /**
     * The child can be either a single PanelBarItem or a PanelBarItem array.
     */
    children?: React.ReactNode;
    /**
     * The class name that is set to the PanelBar.
     */
    className?: string;
}
/**
 * @hidden
 */
export interface PanelBarState {
    focused?: string;
    wrapperFocused?: boolean;
    selected?: string;
    expanded: string[];
}
export default class PanelBar extends React.Component<PanelBarProps, PanelBarState> {
    /**
     * @hidden
     */
    static propTypes: {
        animation: PropTypes.Requireable<boolean>;
        children: (props: PanelBarProps, propName: any) => Error;
        dir: PropTypes.Requireable<string>;
        selected: PropTypes.Requireable<string>;
        expanded: PropTypes.Requireable<string[]>;
        focused: PropTypes.Requireable<string>;
        expandMode: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        style: PropTypes.Requireable<object>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        expandMode: string;
        animation: boolean;
    };
    /**
     * @hidden
     */
    readonly state: PanelBarState;
    private activeDescendant?;
    private _element;
    private _selectionService;
    private _navigationService;
    private nextTickId;
    private readonly selected;
    constructor(props: PanelBarProps);
    /**
     * @hidden
     */
    componentDidUpdate(prevProps: PanelBarProps): void;
    /**
     * @hidden
     */
    handleSelect: (event: PanelBarItemClickEventArguments) => void;
    /**
     * @hidden
     */
    onSelect: (child: React.ReactElement<PanelBarItemProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>, expanded: string[]) => void;
    /**
     * @hidden
     */
    onFocus: (child: React.ReactElement<PanelBarItemProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>) => void;
    /**
     * @hidden
     */
    onNavigate: (action: NavigationAction) => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    protected nextTick(f: () => any): void;
    private handleWrapperFocus;
    private handleWrapperBlur;
    private handleKeyDown;
}
