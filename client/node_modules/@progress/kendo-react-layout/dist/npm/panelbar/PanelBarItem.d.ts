import * as React from 'react';
import * as PropTypes from 'prop-types';
/**
 * Represents the props of the PanelBarItem component.
 */
export interface PanelBarItemProps {
    /**
     * Allows individual animation control over the child ([see example]({% slug animations_panelbar %})). By default, it is controlled by the PanelBar component.
     */
    animation?: boolean;
    /**
     * Can be any of PanelBar items, an array of PanelBar items, or a custom component.
     */
    children?: React.ReactNode;
    /**
     * The class name that is set to the PanelBarItem component.
     */
    className?: string;
    /**
     * The class name that is set to the PanelBarItem header.
     */
    headerClassName?: string;
    /**
     * Sets the initial expanded state of the PanelBarItem ([see example]({% slug statesitems_panelbar %}#toc-expanded-items)). Controlled by the PanelBar component.
     */
    expanded?: boolean;
    /**
     * Sets the disabled state of the PanelBarItem ([see example]({% slug statesitems_panelbar %}#toc-disabled-items)).
     */
    disabled?: boolean;
    /**
     * @hidden
     */
    onSelect?: Function;
    /**
     * @hidden
     */
    root?: boolean;
    /**
     * Defines an icon that will be rendered next to the title ([see example]({% slug titlesitems_panelbar %}#toc-adding-icons)).
     */
    icon?: string;
    /**
     * Defines an icon with a custom CSS class that will be rendered next to the title ([see example]({% slug titlesitems_panelbar %}#toc-adding-icons)).
     */
    iconClass?: string;
    /**
     * Defines the location of the image that will be displayed next to the title ([see example]({% slug titlesitems_panelbar %}#toc-adding-images)).
     */
    imageUrl?: string;
    /**
     * Sets the initial selected state of the PanelBarItem. Controlled by the PanelBarItem component ([see example]({% slug statesitems_panelbar %}#toc-selected-items)).
     */
    selected?: boolean;
    /**
     * Sets the title of the PanelBar item ([see example]({% slug titlesitems_panelbar %}#toc-getting-started)).
     */
    title?: React.ReactNode;
    /**
     * Allows the component to set the `id` property to each item. If not set, a default `id` is applied.
     */
    id?: string;
    /**
     * Sets the initial focused state of the PanelBarItem. Controlled by the PanelBar component.
     */
    focused?: boolean;
    /**
     * @hidden
     */
    parentExpanded?: boolean;
    /**
     * @hidden
     */
    content?: any;
    /**
     * Used to identify the PanelBarItems inside the PanelBar ([see example]({% slug controlling_state_panelbar %})). Does not depend on the state of the PanelBarItem.
     */
    uniquePrivateKey?: string;
    /**
     * @hidden
     */
    parentUniquePrivateKey?: string[];
    /**
     * Sets a custom property. Contained in the PanelBarItem props that are returned from the `onSelect` PanelBar event.
     */
    [customProp: string]: any;
}
export default class PanelBarItem extends React.PureComponent<PanelBarItemProps, {}> {
    /**
     * @hidden
     */
    static propTypes: {
        animation: PropTypes.Requireable<boolean>;
        children: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<string>;
        expanded: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        selected: PropTypes.Requireable<boolean>;
        root: PropTypes.Requireable<boolean>;
        title: PropTypes.Requireable<string | PropTypes.ReactElementLike>;
        id: PropTypes.Requireable<string | number>;
        focused: PropTypes.Requireable<boolean>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        title: string;
    };
    /**
     * @hidden
     */
    render(): JSX.Element;
    private handleItemClick;
}
