import * as React from 'react';
import { SplitterPaneProps } from './SplitterPane';
/**
 * Represents the onChange event of the Splitter.
 */
export interface SplitterOnChangeEvent {
    /**
     * The new panes state.
     */
    newState: SplitterPaneProps[];
    /**
     * Indicates if is the last event during drag. Can be used to optimize performance.
     */
    isLast: boolean;
    /**
     * The native DOM event.
     */
    nativeEvent: React.MouseEvent<HTMLDivElement, MouseEvent> | React.KeyboardEvent<HTMLDivElement> | any;
}
/**
 * Represents the options of the Splitter.
 */
export interface SplitterProps {
    /**
     * Sets the options of the Splitter panes ([more information and examples]({% slug panes_splitter %})). Can be used for controlled state.
     */
    panes?: SplitterPaneProps[];
    /**
     * Sets the initial options of the Splitter panes ([more information and examples]({% slug panes_splitter %})). Can be used for uncontrolled state.
     */
    defaultPanes?: SplitterPaneProps[];
    /**
     * Specifies the orientation of the panes within the Splitter ([more information and examples]({% slug orientation_splitter %})). Panes in a horizontal Splitter are placed horizontally. Panes in a vertical Splitter are placed vertically.
     */
    orientation?: 'vertical' | 'horizontal';
    /**
     * Sets the styles of the Splitter.
     */
    style?: React.CSSProperties;
    /**
     * **Deprecated.** Use `onChange` prop instead.
     */
    onLayoutChange?: (newState: SplitterPaneProps[], isLast: boolean, nativeEvent: React.MouseEvent<HTMLDivElement, MouseEvent> | React.KeyboardEvent<HTMLDivElement> | any) => void;
    /**
     * Fires after a Splitter pane is resized or collapsed. Useful for updating the pane options and triggering layout calculations on components which are positioned inside the panes.
     */
    onChange?: (event: SplitterOnChangeEvent) => void;
    /**
     * The pane elements of the Splitter.
     */
    children?: React.ReactNode;
    /**
     * The class name that is set to the Splitter.
     */
    className?: string;
}
/**
 * @hidden
 */
export interface SplitterState {
    isDragging: boolean;
    dragIndex?: number;
    startTime: number;
    originalX: number;
    originalY: number;
    originalPrevSize: number;
    originalNextSize: number;
    panes: SplitterPaneProps[];
}
/**
 * Represents the [KendoReact Splitter component]({% slug overview_splitter %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    render() {
 *        return (
 *            <div>
 *                <Splitter
 *                    style={{height: 400}}
 *                    orientation={'vertical'}
 *                >
 *                    <div>Pane 1</div>
 *                    <div>Pane 2</div>
 *                    <div>Pane 3</div>
 *                </Splitter>
 *            </div>
 *        );
 *    }
 * }
 *
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare class Splitter extends React.Component<SplitterProps, SplitterState> {
    /**
     * @hidden
     */
    static displayName: string;
    /**
     * @hidden
     */
    readonly state: SplitterState;
    private panesDuringOnChange?;
    private readonly isControlledState;
    private readonly panes;
    private _container;
    private readonly orientation;
    private readonly isRtl;
    private readonly panesContent;
    /**
     * @hidden
     */
    constructor(props: SplitterProps);
    /**
     * @hidden
     */
    render(): JSX.Element;
    private validatePanes;
    private mapPaneOptions;
    private mapSplitterPanes;
    private onBarToggle;
    private onBarDragResize;
    private onBarKeyboardResize;
    private surroudingPanes;
    private containerSize;
    private isPercent;
    private toPixels;
    private panesOptions;
    private resetDragState;
    private elementSize;
    private clamp;
    private fixedSize;
    private resize;
    private getPaneProps;
}
