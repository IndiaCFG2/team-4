var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { classNames, Draggable, Keys } from '@progress/kendo-react-common';
/**
 * @hidden
 */
var SplitterBar = /** @class */ (function (_super) {
    __extends(SplitterBar, _super);
    function SplitterBar(props) {
        var _this = _super.call(this, props) || this;
        _this.onDrag = function (data, isFirst, isLast) {
            var event = data.event;
            var _a = _this.props, onDrag = _a.onDrag, index = _a.index;
            var element = _this.draggable && _this.draggable.element;
            if (!isLast && event) {
                event.originalEvent.preventDefault();
            }
            if (element && !_this.isStatic && _this.isDraggable) {
                onDrag(event, element, index, isFirst, isLast);
            }
        };
        _this.onFocus = function () {
            _this.setState({
                focused: true
            });
        };
        _this.onBlur = function () {
            _this.setState({
                focused: false
            });
        };
        _this.onToggle = function (event) {
            var _a = _this.props, onToggle = _a.onToggle, index = _a.index, prev = _a.prev, next = _a.next;
            if (prev.collapsible || next.collapsible) {
                onToggle(prev.collapsible ? index : index + 1, event);
            }
        };
        _this.onPrevToggle = function (event) {
            var _a = _this.props, onToggle = _a.onToggle, index = _a.index, prev = _a.prev;
            if (prev.collapsible) {
                onToggle(index, event);
            }
        };
        _this.onNextToggle = function (event) {
            var _a = _this.props, onToggle = _a.onToggle, index = _a.index, next = _a.next;
            if (next.collapsible) {
                onToggle(index + 1, event);
            }
        };
        _this.onKeyDown = function (event) {
            var keyCode = event && event.keyCode;
            var isHorizontal = _this.isHorizontal;
            var index = _this.props.index;
            var element = _this.draggable && _this.draggable.element;
            var onKeyboardResize = function (el, idx, offset) {
                event.preventDefault();
                _this.props.onKeyboardResize(el, idx, offset, event);
            };
            if (!element) {
                return;
            }
            if (keyCode === Keys.enter) {
                event.preventDefault();
                _this.onToggle(event);
            }
            else if (_this.isDraggable) {
                if (isHorizontal && keyCode === Keys.left) {
                    onKeyboardResize(element, index, -10);
                }
                else if (isHorizontal && keyCode === Keys.right) {
                    onKeyboardResize(element, index, 10);
                }
                else if (!isHorizontal && keyCode === Keys.up) {
                    onKeyboardResize(element, index, -10);
                }
                else if (!isHorizontal && keyCode === Keys.down) {
                    onKeyboardResize(element, index, 10);
                }
            }
        };
        _this.previousArrowClass = function (isHorizontal) {
            var _a;
            var prev = _this.props.prev;
            var isCollapsible = prev.collapsible;
            var isCollapsed = prev.collapsed;
            return classNames('k-icon', (_a = {},
                _a['k-hidden'] = !isCollapsible,
                _a['k-collapse-prev'] = isCollapsible,
                _a['k-i-arrow-60-left'] = isCollapsible && isHorizontal && !isCollapsed,
                _a['k-i-arrow-60-right'] = isCollapsible && isHorizontal && isCollapsed,
                _a['k-i-arrow-60-up'] = isCollapsible && !isHorizontal && !isCollapsed,
                _a['k-i-arrow-60-down'] = isCollapsible && !isHorizontal && isCollapsed,
                _a));
        };
        _this.nextArrowClass = function (isHorizontal) {
            var _a;
            var next = _this.props.next;
            var isCollapsible = next.collapsible;
            var isCollapsed = next.collapsed;
            return classNames('k-icon', (_a = {},
                _a['k-hidden'] = !isCollapsible,
                _a['k-collapse-next'] = isCollapsible,
                _a['k-i-arrow-60-right'] = isCollapsible && isHorizontal && !isCollapsed,
                _a['k-i-arrow-60-left'] = isCollapsible && isHorizontal && isCollapsed,
                _a['k-i-arrow-60-down'] = isCollapsible && !isHorizontal && !isCollapsed,
                _a['k-i-arrow-60-up'] = isCollapsible && !isHorizontal && isCollapsed,
                _a));
        };
        _this.state = {
            focused: false
        };
        return _this;
    }
    Object.defineProperty(SplitterBar.prototype, "isStatic", {
        get: function () {
            var _a = this.props, prev = _a.prev, next = _a.next;
            var betweenResizablePanes = prev.resizable && next.resizable;
            var nearCollapsiblePane = prev.collapsible || next.collapsible;
            return !betweenResizablePanes && !nearCollapsiblePane;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplitterBar.prototype, "isDraggable", {
        get: function () {
            var _a = this.props, prev = _a.prev, next = _a.next;
            var betweenResizablePanes = prev.resizable && next.resizable;
            var nearCollapsedPane = prev.collapsed || next.collapsed;
            return !!betweenResizablePanes && !nearCollapsedPane;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplitterBar.prototype, "isHorizontal", {
        get: function () {
            return this.props.orientation === 'horizontal';
        },
        enumerable: true,
        configurable: true
    });
    SplitterBar.prototype.render = function () {
        var _this = this;
        var _a;
        var isDraggable = this.isDraggable;
        var isStatic = this.isStatic;
        var isHorizontal = this.isHorizontal;
        var barClasses = classNames('k-splitbar', (_a = {},
            _a['k-state-focused'] = this.state.focused,
            _a['k-splitbar-horizontal'] = isHorizontal,
            _a['k-splitbar-vertical'] = !isHorizontal,
            _a['k-splitbar-draggable-horizontal'] = isHorizontal && isDraggable,
            _a['k-splitbar-draggable-vertical'] = !isHorizontal && isDraggable,
            _a['k-splitbar-static-horizontal'] = isHorizontal && isStatic,
            _a['k-splitbar-static-vertical'] = !isHorizontal && isStatic,
            _a));
        var previousArrowClass = this.previousArrowClass(isHorizontal);
        var nextArrowClass = this.nextArrowClass(isHorizontal);
        return (React.createElement(Draggable, { onPress: function (event) { return _this.onDrag(event, true, false); }, onDrag: function (event) { return _this.onDrag(event, false, false); }, onRelease: function (event) { return _this.onDrag(event, false, true); }, ref: function (component) { _this.draggable = component; } },
            React.createElement("div", { tabIndex: isStatic ? -1 : 0, role: 'separator', className: barClasses, style: { touchAction: 'none' }, onFocus: this.onFocus, onBlur: this.onBlur, onDoubleClick: this.onToggle, onKeyDown: this.onKeyDown },
                React.createElement("div", { className: previousArrowClass, onClick: this.onPrevToggle }),
                React.createElement("div", { className: 'k-resize-handle' }),
                React.createElement("div", { className: nextArrowClass, onClick: this.onNextToggle }))));
    };
    return SplitterBar;
}(React.Component));
export { SplitterBar };
//# sourceMappingURL=SplitterBar.js.map