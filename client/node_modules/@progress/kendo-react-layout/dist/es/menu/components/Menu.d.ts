import * as React from 'react';
import * as PropTypes from 'prop-types';
import { MenuProps } from '../MenuProps';
/**
 * @hidden
 */
export interface MenuState {
    focusedItemId: string;
    hoveredItemId: string;
    tabbableItemId: string;
    isFirstRender: boolean;
}
/**
 * Represents the [KendoReact Menu component]({% slug overview_menu %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    render() {
 *        return (
 *            <Menu>
 *                <MenuItem text="Item1" />
 *                <MenuItem text="Item2">
 *                    <MenuItem text="Item2.1" />
 *                    <MenuItem text="Item2.2" />
 *                </MenuItem>
 *                <MenuItem text="Item3" />
 *            </Menu>
 *        );
 *    }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export default class Menu extends React.Component<MenuProps, MenuState> {
    /**
     * @hidden
     */
    static propTypes: {
        vertical: PropTypes.Requireable<boolean>;
        items: PropTypes.Requireable<object[]>;
        style: PropTypes.Requireable<object>;
        dir: PropTypes.Requireable<string>;
        hoverOpenDelay: PropTypes.Requireable<number>;
        hoverCloseDelay: PropTypes.Requireable<number>;
        openOnClick: PropTypes.Requireable<boolean>;
        itemRender: PropTypes.Requireable<any>;
        linkRender: PropTypes.Requireable<any>;
        customCloseItemIds: PropTypes.Requireable<string[]>;
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        vertical: boolean;
    };
    /**
     * @hidden
     */
    readonly state: MenuState;
    private itemHoverRequest;
    private itemLeaveRequest;
    private menuWrapperEl;
    private guid;
    private directionHolder;
    private inputItems;
    private items;
    private mouseOverHandler;
    constructor(props: MenuProps);
    /**
     * @hidden
     */
    render(): JSX.Element;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(prevProps: MenuProps): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * Resets the selection and opening of Menu items.
     */
    reset: () => void;
    private onKeyDown;
    private onItemMouseOver;
    private onItemMouseLeave;
    private onItemMouseDown;
    private onItemFocus;
    private onItemClick;
    private onItemBlur;
    private getInputItem;
    private setFocusedItemId;
    private setHoveredItemId;
    private getMenuWrapperClassName;
    private getMenuClassName;
    private clearItemHoverAndLeaveRequestsIfApplicable;
    private isItemWithDefaultClose;
    private checkIsDirectionRightToLeft;
    private prepareItems;
    private dispatchSelectEventIfWired;
}
