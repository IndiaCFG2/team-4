import * as React from 'react';
import { isArrayEqual } from '../util';
/**
 * @hidden
 */
var SelectionService = /** @class */ (function () {
    function SelectionService(onSelectCallback, onFocusCallback, expandMode) {
        var _this = this;
        this.flatChildren = function (children, flattenChildren) {
            if (flattenChildren === void 0) { flattenChildren = []; }
            React.Children.forEach(children, function (child) {
                if (child && child.props && !child.props.disabled) {
                    flattenChildren.push(child);
                    if (child.props.children) {
                        _this.flatChildren(child.props.children, flattenChildren);
                    }
                }
            });
            return flattenChildren;
        };
        this.flatVisibleChildren = function (children, flattenVisibleChildren) {
            if (flattenVisibleChildren === void 0) { flattenVisibleChildren = []; }
            React.Children.forEach(children, function (child) {
                if (child && child.props && !child.props.disabled && (child.props.expanded || child.props.parentExpanded)) {
                    flattenVisibleChildren.push(child);
                    if (child.props.children) {
                        _this.flatVisibleChildren(child.props.children, flattenVisibleChildren);
                    }
                }
            });
            return flattenVisibleChildren;
        };
        this.onSelect = onSelectCallback;
        this.onFocus = onFocusCallback;
        this.expandMode = expandMode;
    }
    SelectionService.prototype.select = function (uniquePrivateKey, children, expanded) {
        var flattenChildren = this.flatChildren(React.Children.toArray(children));
        var selectedChild;
        var newExpanded;
        flattenChildren.forEach(function (child) {
            if (child.props.uniquePrivateKey === uniquePrivateKey) {
                selectedChild = child;
            }
        });
        switch (this.expandMode) {
            case 'single':
                newExpanded = selectedChild.props.parentUniquePrivateKey.concat([selectedChild.props.uniquePrivateKey]);
                if (isArrayEqual(expanded, newExpanded)) {
                    if (selectedChild.props.parentUniquePrivateKey) {
                        newExpanded = selectedChild.props.parentUniquePrivateKey.slice();
                    }
                    else {
                        newExpanded = [];
                    }
                }
                break;
            case 'multiple':
                newExpanded = expanded.slice();
                var index = newExpanded.indexOf(selectedChild.props.uniquePrivateKey);
                index === -1 ? newExpanded.push(selectedChild.props.uniquePrivateKey) : newExpanded.splice(index, 1);
                break;
            default:
                newExpanded = expanded.slice();
                break;
        }
        this.onSelect(selectedChild, newExpanded);
    };
    SelectionService.prototype.focus = function (currentFocus, step, children) {
        var flattenChildren = this.flatVisibleChildren(React.Children.toArray(children));
        var focusedChild;
        flattenChildren.forEach(function (child, ixd) {
            if (child.props.uniquePrivateKey === currentFocus) {
                var index = ixd + step < 0 ?
                    0 : ixd + step >= flattenChildren.length
                    ? flattenChildren.length - 1
                    : ixd + step;
                focusedChild = flattenChildren[index];
            }
        });
        this.onFocus(focusedChild);
    };
    SelectionService.prototype.setExpandMode = function (expandMode) {
        this.expandMode = expandMode;
    };
    return SelectionService;
}());
export default SelectionService;
//# sourceMappingURL=selectionService.js.map