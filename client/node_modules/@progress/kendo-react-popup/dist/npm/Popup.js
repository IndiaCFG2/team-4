"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var PropTypes = require("prop-types");
var animation_1 = require("./animation");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var util_1 = require("./util");
var alignService_1 = require("./services/alignService");
var domService_1 = require("./services/domService");
var positionService_1 = require("./services/positionService");
function isEquivalent(a, b) {
    if (a === b) {
        return true;
    }
    if (!!a !== !!b) {
        return false;
    }
    var aProps = Object.getOwnPropertyNames(a);
    var bProps = Object.getOwnPropertyNames(b);
    if (aProps.length !== bProps.length) {
        return false;
    }
    for (var i = 0; i < aProps.length; i++) {
        var propName = aProps[i];
        if (a[propName] !== b[propName]) {
            return false;
        }
    }
    return true;
}
var DEFAULT_OFFSET = {
    left: -1000,
    top: 0
};
var Status;
(function (Status) {
    Status["hiding"] = "hiding";
    Status["hidden"] = "hidden";
    Status["showing"] = "showing";
    Status["shown"] = "shown";
    Status["reposition"] = "reposition";
})(Status || (Status = {}));
var ANIMATION_CONTAINER = 'k-animation-container';
var ANIMATION_CONTAINER_SHOWN = 'k-animation-container-shown';
var ANIMATION_CONTAINER_RELATIVE = 'k-animation-container-relative';
var ANIMATION_CONTAINER_CHILD = 'k-child-animation-container';
var K_POPUP = 'k-popup';
var Popup = /** @class */ (function (_super) {
    __extends(Popup, _super);
    function Popup(props) {
        var _this = _super.call(this, props) || this;
        /**
         * @hidden
         */
        _this.state = { current: Status.hidden, previous: Status.hidden, props: {} };
        _this._popup = null;
        _this.show = function (popup) {
            _this.setPosition(popup);
            _this.animate(popup.firstChild, 'enter', _this.onOpened);
            _this.setState({ current: Status.shown, previous: _this.state.current });
        };
        _this.setPosition = function (popup) {
            var _a = _this.props, anchorAlign = _a.anchorAlign, popupAlign = _a.popupAlign, collision = _a.collision, offset = _a.offset, anchor = _a.anchor;
            var popupContent = popup.firstElementChild;
            var alignedOffset = _this._alignService.alignElement({
                anchor: anchor,
                element: popupContent,
                elementAlign: popupAlign,
                anchorAlign: anchorAlign,
                offset: offset
            });
            var position = _this._positionService.positionElement({
                anchor: anchor,
                anchorAlign: anchorAlign,
                collisions: collision,
                element: popupContent,
                currentLocation: alignedOffset,
                elementAlign: popupAlign
            });
            if (position.offset) {
                popup.style.top = position.offset.top + 'px';
                popup.style.left = position.offset.left + 'px';
                popupContent.style.position = '';
            }
            _this._flipped = position.flipped;
        };
        _this.onOpened = function () {
            var element = _this._popup;
            if (!element) {
                return;
            }
            if (_this.props.show) {
                element.classList.add(ANIMATION_CONTAINER_SHOWN);
            }
            _this.attachRepositionHandlers(element);
            if (_this.props.open) {
                _this.props.open.call(undefined, { target: _this });
            }
            if (_this.props.onOpen) {
                _this.props.onOpen.call(undefined, { target: _this });
            }
        };
        _this.animate = function (element, type, callback) {
            animation_1.slide(element, _this._flipped ? 'up' : 'down', _this.animationDuration[type], type, callback);
        };
        _this.onClosing = function (popup) {
            if (!_this.props.show) {
                popup.classList.remove(ANIMATION_CONTAINER_SHOWN);
            }
            _this.detachRepositionHandlers();
        };
        _this.onClosed = function () {
            if (_this.state.current === Status.hiding && _this.state.previous === Status.shown) {
                _this.setState({ current: Status.hidden, previous: _this.state.current });
            }
            if (_this.props.close) {
                _this.props.close.call(undefined, { target: _this });
            }
            if (_this.props.onClose) {
                _this.props.onClose.call(undefined, { target: _this });
            }
        };
        _this._domService = new domService_1.DOMService();
        _this._alignService = new alignService_1.AlignService(_this._domService);
        _this._positionService = new positionService_1.PositionService(_this._domService);
        _this.reposition = util_1.throttle(_this.reposition.bind(_this), util_1.FRAME_DURATION);
        return _this;
    }
    /**
     * @hidden
     */
    Popup.getDerivedStateFromProps = function (props, state) {
        var show = props.show, anchor = props.anchor, anchorAlign = props.anchorAlign, appendTo = props.appendTo, collision = props.collision, popupAlign = props.popupAlign, className = props.className, popupClass = props.popupClass, style = props.style, offset = props.offset;
        var nextState = __assign({}, state, { props: {
                show: show, anchor: anchor, anchorAlign: anchorAlign, appendTo: appendTo, collision: collision, popupAlign: popupAlign, className: className, popupClass: popupClass, style: style, offset: offset
            } });
        if (props.show) {
            if (state.current === Status.hidden || state.current === Status.hiding) {
                return __assign({}, nextState, { current: Status.showing, previous: state.current });
            }
            else if (state.current === Status.showing) {
                return __assign({}, nextState, { current: Status.shown, previous: state.current });
            }
            if (state.current === Status.shown &&
                (!isEquivalent(offset, state.props.offset) ||
                    !isEquivalent(anchorAlign, state.props.anchorAlign) ||
                    !isEquivalent(appendTo, state.props.appendTo) ||
                    !isEquivalent(collision, state.props.collision) ||
                    !isEquivalent(popupAlign, state.props.popupAlign) ||
                    !isEquivalent(style, state.props.style) ||
                    !isEquivalent(offset, state.props.offset) ||
                    anchor !== state.props.anchor ||
                    popupClass !== state.props.popupClass ||
                    className !== state.props.className)) {
                return __assign({}, nextState, { current: Status.reposition, previous: state.current });
            }
        }
        else {
            if (state.current === Status.shown || state.current === Status.showing) {
                return __assign({}, nextState, { current: Status.hiding, previous: state.current });
            }
            else if (state.current === Status.hiding) {
                return __assign({}, nextState, { current: Status.hidden, previous: state.current });
            }
        }
        return nextState;
    };
    /**
     * @hidden
     */
    Popup.prototype.componentDidUpdate = function (_prevProps) {
        if (this.state.current === Status.showing && this._popup) {
            this.show(this._popup);
        }
        else if (this.state.current === Status.hiding && this._popup) {
            this.onClosing(this._popup);
            this.animate(this._popup.firstChild, 'exit', this.onClosed);
        }
        else if (this.state.current === Status.reposition && this.state.previous === Status.shown) {
            this.setState({ current: Status.shown, previous: this.state.current });
        }
    };
    /**
     * @hidden
     */
    Popup.prototype.componentDidMount = function () {
        if (this.state.current === Status.showing && this._popup) {
            this.show(this._popup);
        }
    };
    /**
     * @hidden
     */
    Popup.prototype.componentWillUnmount = function () {
        this.detachRepositionHandlers();
    };
    /**
     * @hidden
     */
    Popup.prototype.render = function () {
        var _this = this;
        var _a = this.props, children = _a.children, className = _a.className, popupClass = _a.popupClass, show = _a.show, id = _a.id, _b = _a.appendTo, appendTo = _b === void 0 ? kendo_react_common_1.canUseDOM ? document.body : undefined : _b;
        if (this.state.current === Status.reposition && this.state.previous === Status.shown && this._popup) {
            this.setPosition(this._popup);
        }
        var style = Object.assign({}, { position: 'absolute' }, this.props.style || {});
        var closing = this.state.current === Status.hiding && this.state.previous === Status.shown;
        if ((show || closing) && appendTo) {
            var popup = (React.createElement("div", { className: kendo_react_common_1.classNames(ANIMATION_CONTAINER, ANIMATION_CONTAINER_RELATIVE, className), id: id, ref: function (e) { return _this._popup = e; }, style: style },
                React.createElement("div", { className: kendo_react_common_1.classNames(popupClass, K_POPUP, ANIMATION_CONTAINER_CHILD), style: { transitionDelay: '0ms', position: 'absolute' } }, children)));
            return ReactDOM.createPortal(popup, appendTo);
        }
        return null;
    };
    Object.defineProperty(Popup.prototype, "animationDuration", {
        get: function () {
            var animate = this.props.animate;
            var enter = 0;
            var exit = 0;
            if (animate) {
                if (animate === true) {
                    enter = exit = 300;
                }
                else {
                    enter = animate.openDuration || 0;
                    exit = animate.closeDuration || 0;
                }
            }
            return { enter: enter, exit: exit };
        },
        enumerable: true,
        configurable: true
    });
    Popup.prototype.attachRepositionHandlers = function (element) {
        var _this = this;
        this.detachRepositionHandlers();
        this._scrollableParents = this._domService.scrollableParents(this.props.anchor || element);
        this._scrollableParents.map(function (p) { return p.addEventListener('scroll', _this.reposition); });
        window.addEventListener('resize', this.reposition);
    };
    Popup.prototype.detachRepositionHandlers = function () {
        var _this = this;
        if (this._scrollableParents) {
            this._scrollableParents.map(function (p) { return p.removeEventListener('scroll', _this.reposition); });
            this._scrollableParents = undefined;
        }
        window.removeEventListener('resize', this.reposition);
    };
    Popup.prototype.reposition = function () {
        this.setState({ current: Status.reposition, previous: this.state.current });
    };
    /**
     * @hidden
     */
    Popup.propTypes = {
        anchor: function (props) {
            var anchor = props.anchor;
            if (anchor && typeof anchor.nodeType !== 'number') {
                return new Error('Invalid prop `anchor` supplied to `Kendo React Popup`. Validation failed.');
            }
        },
        appendTo: function (props) {
            var element = props.appendTo;
            if (element && typeof element.nodeType !== 'number') {
                return new Error('Invalid prop `appendTo` supplied to `Kendo React Popup`. Validation failed.');
            }
        },
        className: PropTypes.string,
        id: PropTypes.string,
        popupClass: PropTypes.string,
        collision: PropTypes.shape({
            horizontal: PropTypes.oneOf([
                util_1.CollisionType.fit,
                util_1.CollisionType.flip
            ]),
            vertical: PropTypes.oneOf([
                util_1.CollisionType.fit,
                util_1.CollisionType.flip
            ])
        }),
        anchorAlign: PropTypes.shape({
            horizontal: PropTypes.oneOf([
                util_1.AlignPoint.left,
                util_1.AlignPoint.center,
                util_1.AlignPoint.right
            ]),
            vertical: PropTypes.oneOf([
                util_1.AlignPoint.top,
                util_1.AlignPoint.center,
                util_1.AlignPoint.bottom
            ])
        }),
        popupAlign: PropTypes.shape({
            horizontal: PropTypes.oneOf([
                util_1.AlignPoint.left,
                util_1.AlignPoint.center,
                util_1.AlignPoint.right
            ]),
            vertical: PropTypes.oneOf([
                util_1.AlignPoint.top,
                util_1.AlignPoint.center,
                util_1.AlignPoint.bottom
            ])
        }),
        offset: PropTypes.shape({
            left: PropTypes.number,
            top: PropTypes.number
        }),
        children: PropTypes.oneOfType([
            PropTypes.element,
            PropTypes.node
        ]),
        show: PropTypes.bool,
        animate: PropTypes.oneOfType([
            PropTypes.bool,
            PropTypes.shape({
                openDuration: PropTypes.number,
                closeDuration: PropTypes.number
            })
        ])
    };
    /**
     * @hidden
     */
    Popup.defaultProps = {
        collision: {
            horizontal: util_1.CollisionType.fit,
            vertical: util_1.CollisionType.flip
        },
        anchorAlign: {
            horizontal: util_1.AlignPoint.left,
            vertical: util_1.AlignPoint.bottom
        },
        popupAlign: {
            horizontal: util_1.AlignPoint.left,
            vertical: util_1.AlignPoint.top
        },
        offset: DEFAULT_OFFSET,
        animate: true,
        show: false
    };
    return Popup;
}(React.Component));
exports.default = Popup;
//# sourceMappingURL=Popup.js.map