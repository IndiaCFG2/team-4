import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Offset } from './models/Offset';
import { PopupProps } from './models/PopupProps';
import { Align } from './models/Align';
import { Collision } from './models/Collision';
declare enum Status {
    hiding = "hiding",
    hidden = "hidden",
    showing = "showing",
    shown = "shown",
    reposition = "reposition"
}
/**
 * @hidden
 */
export interface PropsWithChildren extends PopupProps {
    children?: React.ReactNode;
}
/**
 * @hidden
 */
export interface PopupState {
    current: Status;
    previous: Status;
    props: {
        show?: boolean;
        anchor?: HTMLElement;
        anchorAlign?: Align;
        appendTo?: HTMLElement;
        collision?: Collision;
        popupAlign?: Align;
        className?: string | Array<string>;
        popupClass?: string | Array<string>;
        style?: React.CSSProperties;
        offset?: Offset;
    };
}
export default class Popup extends React.Component<PopupProps, PopupState> {
    /**
     * @hidden
     */
    static propTypes: {
        anchor: (props: PopupProps) => Error;
        appendTo: (props: PopupProps) => Error;
        className: PropTypes.Requireable<string>;
        id: PropTypes.Requireable<string>;
        popupClass: PropTypes.Requireable<string>;
        collision: PropTypes.Requireable<PropTypes.InferProps<{
            horizontal: PropTypes.Requireable<string>;
            vertical: PropTypes.Requireable<string>;
        }>>;
        anchorAlign: PropTypes.Requireable<PropTypes.InferProps<{
            horizontal: PropTypes.Requireable<string>;
            vertical: PropTypes.Requireable<string>;
        }>>;
        popupAlign: PropTypes.Requireable<PropTypes.InferProps<{
            horizontal: PropTypes.Requireable<string>;
            vertical: PropTypes.Requireable<string>;
        }>>;
        offset: PropTypes.Requireable<PropTypes.InferProps<{
            left: PropTypes.Requireable<number>;
            top: PropTypes.Requireable<number>;
        }>>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        show: PropTypes.Requireable<boolean>;
        animate: PropTypes.Requireable<boolean | PropTypes.InferProps<{
            openDuration: PropTypes.Requireable<number>;
            closeDuration: PropTypes.Requireable<number>;
        }>>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        collision: {
            horizontal: string;
            vertical: string;
        };
        anchorAlign: {
            horizontal: string;
            vertical: string;
        };
        popupAlign: {
            horizontal: string;
            vertical: string;
        };
        offset: {
            left: number;
            top: number;
        };
        animate: boolean;
        show: boolean;
    };
    /**
     * @hidden
     */
    readonly state: PopupState;
    private _alignService;
    private _positionService;
    private _domService;
    private _flipped;
    private _scrollableParents;
    private _popup;
    constructor(props: PopupProps);
    /**
     * @hidden
     */
    static getDerivedStateFromProps(props: PopupProps, state: PopupState): {
        props: {
            show: boolean;
            anchor: HTMLElement;
            anchorAlign: Align;
            appendTo: HTMLElement;
            collision: Collision;
            popupAlign: Align;
            className: string | string[];
            popupClass: string | string[];
            style: React.CSSProperties;
            offset: Offset;
        };
        current: Status;
        previous: Status;
    };
    /**
     * @hidden
     */
    componentDidUpdate(_prevProps: PopupProps): void;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * @hidden
     */
    render(): React.ReactPortal;
    private show;
    private setPosition;
    private onOpened;
    private animate;
    private onClosing;
    private onClosed;
    private readonly animationDuration;
    private attachRepositionHandlers;
    private detachRepositionHandlers;
    private reposition;
}
export {};
