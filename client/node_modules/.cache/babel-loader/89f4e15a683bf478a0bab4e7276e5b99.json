{"ast":null,"code":"/*!\r\n * statuses\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2016 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module dependencies.\r\n * @private\r\n */\n\nvar codes = require('./codes.json');\n/**\r\n * Module exports.\r\n * @public\r\n */\n\n\nmodule.exports = status; // status code to message map\n\nstatus.STATUS_CODES = codes; // array of status codes\n\nstatus.codes = populateStatusesMap(status, codes); // status codes for redirects\n\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}; // status codes for empty bodies\n\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}; // status codes for when you should retry the request\n\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n};\n/**\r\n * Populate the statuses map for given codes.\r\n * @private\r\n */\n\nfunction populateStatusesMap(statuses, codes) {\n  var arr = [];\n  Object.keys(codes).forEach(function forEachCode(code) {\n    var message = codes[code];\n    var status = Number(code); // Populate properties\n\n    statuses[status] = message;\n    statuses[message] = status;\n    statuses[message.toLowerCase()] = status; // Add to array\n\n    arr.push(status);\n  });\n  return arr;\n}\n/**\r\n * Get the status code.\r\n *\r\n * Given a number, this will throw if it is not a known status\r\n * code, otherwise the code will be returned. Given a string,\r\n * the string will be parsed for a number and return the code\r\n * if valid, otherwise will lookup the code assuming this is\r\n * the status message.\r\n *\r\n * @param {string|number} code\r\n * @returns {number}\r\n * @public\r\n */\n\n\nfunction status(code) {\n  if (typeof code === 'number') {\n    if (!status[code]) throw new Error('invalid status code: ' + code);\n    return code;\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string');\n  } // '403'\n\n\n  var n = parseInt(code, 10);\n\n  if (!isNaN(n)) {\n    if (!status[n]) throw new Error('invalid status code: ' + n);\n    return n;\n  }\n\n  n = status[code.toLowerCase()];\n  if (!n) throw new Error('invalid status message: \"' + code + '\"');\n  return n;\n}","map":{"version":3,"sources":["C:/Users/nithya/Desktop/team-4/client/node_modules/statuses/index.js"],"names":["codes","require","module","exports","status","STATUS_CODES","populateStatusesMap","redirect","empty","retry","statuses","arr","Object","keys","forEach","forEachCode","code","message","Number","toLowerCase","push","Error","TypeError","n","parseInt","isNaN"],"mappings":"AAAA;;;;;;AAOA;AAEA;;;;;AAKA,IAAIA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAAnB;AAEA;;;;;;AAKAC,MAAM,CAACC,OAAP,GAAiBC,MAAjB,C,CAEA;;AACAA,MAAM,CAACC,YAAP,GAAsBL,KAAtB,C,CAEA;;AACAI,MAAM,CAACJ,KAAP,GAAeM,mBAAmB,CAACF,MAAD,EAASJ,KAAT,CAAlC,C,CAEA;;AACAI,MAAM,CAACG,QAAP,GAAkB;AAChB,OAAK,IADW;AAEhB,OAAK,IAFW;AAGhB,OAAK,IAHW;AAIhB,OAAK,IAJW;AAKhB,OAAK,IALW;AAMhB,OAAK,IANW;AAOhB,OAAK;AAPW,CAAlB,C,CAUA;;AACAH,MAAM,CAACI,KAAP,GAAe;AACb,OAAK,IADQ;AAEb,OAAK,IAFQ;AAGb,OAAK;AAHQ,CAAf,C,CAMA;;AACAJ,MAAM,CAACK,KAAP,GAAe;AACb,OAAK,IADQ;AAEb,OAAK,IAFQ;AAGb,OAAK;AAHQ,CAAf;AAMA;;;;;AAKA,SAASH,mBAAT,CAA8BI,QAA9B,EAAwCV,KAAxC,EAA+C;AAC7C,MAAIW,GAAG,GAAG,EAAV;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYb,KAAZ,EAAmBc,OAAnB,CAA2B,SAASC,WAAT,CAAsBC,IAAtB,EAA4B;AACrD,QAAIC,OAAO,GAAGjB,KAAK,CAACgB,IAAD,CAAnB;AACA,QAAIZ,MAAM,GAAGc,MAAM,CAACF,IAAD,CAAnB,CAFqD,CAIrD;;AACAN,IAAAA,QAAQ,CAACN,MAAD,CAAR,GAAmBa,OAAnB;AACAP,IAAAA,QAAQ,CAACO,OAAD,CAAR,GAAoBb,MAApB;AACAM,IAAAA,QAAQ,CAACO,OAAO,CAACE,WAAR,EAAD,CAAR,GAAkCf,MAAlC,CAPqD,CASrD;;AACAO,IAAAA,GAAG,CAACS,IAAJ,CAAShB,MAAT;AACD,GAXD;AAaA,SAAOO,GAAP;AACD;AAED;;;;;;;;;;;;;;;AAcA,SAASP,MAAT,CAAiBY,IAAjB,EAAuB;AACrB,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,QAAI,CAACZ,MAAM,CAACY,IAAD,CAAX,EAAmB,MAAM,IAAIK,KAAJ,CAAU,0BAA0BL,IAApC,CAAN;AACnB,WAAOA,IAAP;AACD;;AAED,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAIM,SAAJ,CAAc,iCAAd,CAAN;AACD,GARoB,CAUrB;;;AACA,MAAIC,CAAC,GAAGC,QAAQ,CAACR,IAAD,EAAO,EAAP,CAAhB;;AACA,MAAI,CAACS,KAAK,CAACF,CAAD,CAAV,EAAe;AACb,QAAI,CAACnB,MAAM,CAACmB,CAAD,CAAX,EAAgB,MAAM,IAAIF,KAAJ,CAAU,0BAA0BE,CAApC,CAAN;AAChB,WAAOA,CAAP;AACD;;AAEDA,EAAAA,CAAC,GAAGnB,MAAM,CAACY,IAAI,CAACG,WAAL,EAAD,CAAV;AACA,MAAI,CAACI,CAAL,EAAQ,MAAM,IAAIF,KAAJ,CAAU,8BAA8BL,IAA9B,GAAqC,GAA/C,CAAN;AACR,SAAOO,CAAP;AACD","sourcesContent":["/*!\r\n * statuses\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2016 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar codes = require('./codes.json')\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = status\r\n\r\n// status code to message map\r\nstatus.STATUS_CODES = codes\r\n\r\n// array of status codes\r\nstatus.codes = populateStatusesMap(status, codes)\r\n\r\n// status codes for redirects\r\nstatus.redirect = {\r\n  300: true,\r\n  301: true,\r\n  302: true,\r\n  303: true,\r\n  305: true,\r\n  307: true,\r\n  308: true\r\n}\r\n\r\n// status codes for empty bodies\r\nstatus.empty = {\r\n  204: true,\r\n  205: true,\r\n  304: true\r\n}\r\n\r\n// status codes for when you should retry the request\r\nstatus.retry = {\r\n  502: true,\r\n  503: true,\r\n  504: true\r\n}\r\n\r\n/**\r\n * Populate the statuses map for given codes.\r\n * @private\r\n */\r\n\r\nfunction populateStatusesMap (statuses, codes) {\r\n  var arr = []\r\n\r\n  Object.keys(codes).forEach(function forEachCode (code) {\r\n    var message = codes[code]\r\n    var status = Number(code)\r\n\r\n    // Populate properties\r\n    statuses[status] = message\r\n    statuses[message] = status\r\n    statuses[message.toLowerCase()] = status\r\n\r\n    // Add to array\r\n    arr.push(status)\r\n  })\r\n\r\n  return arr\r\n}\r\n\r\n/**\r\n * Get the status code.\r\n *\r\n * Given a number, this will throw if it is not a known status\r\n * code, otherwise the code will be returned. Given a string,\r\n * the string will be parsed for a number and return the code\r\n * if valid, otherwise will lookup the code assuming this is\r\n * the status message.\r\n *\r\n * @param {string|number} code\r\n * @returns {number}\r\n * @public\r\n */\r\n\r\nfunction status (code) {\r\n  if (typeof code === 'number') {\r\n    if (!status[code]) throw new Error('invalid status code: ' + code)\r\n    return code\r\n  }\r\n\r\n  if (typeof code !== 'string') {\r\n    throw new TypeError('code must be a number or string')\r\n  }\r\n\r\n  // '403'\r\n  var n = parseInt(code, 10)\r\n  if (!isNaN(n)) {\r\n    if (!status[n]) throw new Error('invalid status code: ' + n)\r\n    return n\r\n  }\r\n\r\n  n = status[code.toLowerCase()]\r\n  if (!n) throw new Error('invalid status message: \"' + code + '\"')\r\n  return n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}