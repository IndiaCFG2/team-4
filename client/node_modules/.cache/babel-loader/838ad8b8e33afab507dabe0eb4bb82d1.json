{"ast":null,"code":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { exportElement } from './export-element';\n/**\n * @hidden\n */\n\nexport function provideSaveGridPDF(savePDF) {\n  return function (grid, pdfExportOptions, callback, data, columns) {\n    if (pdfExportOptions === void 0) {\n      pdfExportOptions = {};\n    }\n\n    return saveGridPDF(savePDF, grid, pdfExportOptions, callback, data, columns);\n  };\n}\n\nfunction saveGridPDF(savePDF, grid, pdfExportOptions, callback, data, columns) {\n  if (pdfExportOptions === void 0) {\n    pdfExportOptions = {};\n  }\n\n  renderGrid();\n  var gridOuterWrapper;\n  var gridInnerWrapper;\n  var finalContainer;\n\n  function renderGrid() {\n    gridOuterWrapper = document.createElement('div');\n    gridOuterWrapper.setAttribute('style', 'position:absolute; left: -5000px; top: 0px;');\n    gridInnerWrapper = document.createElement('div');\n    gridOuterWrapper.appendChild(gridInnerWrapper);\n    document.body.appendChild(gridOuterWrapper);\n    ReactDOM.render(prepareRawGridForExport(), gridInnerWrapper, onGridRendered);\n  }\n\n  function onGridRendered() {\n    savePDF(prepareFinalElementForExport(), pdfExportOptions, cleanUpAndInvokeCallback);\n  }\n\n  function cleanUpAndInvokeCallback() {\n    document.body.removeChild(gridOuterWrapper);\n    document.body.removeChild(finalContainer);\n    gridOuterWrapper = finalContainer = undefined;\n\n    if (callback) {\n      callback();\n    }\n  }\n\n  function prepareFinalElementForExport() {\n    /* Ultimatelly, there is no need for double DOM-copying of the grid.\n    The one in this method is a copied Angular implementation\n    that has been plugged almost seemlessly. */\n    finalContainer = document.createElement('div');\n    finalContainer.className = 'k-grid-pdf-export-element';\n    var result = exportElement(gridInnerWrapper);\n    finalContainer.appendChild(result);\n    document.body.appendChild(finalContainer);\n    return result;\n  }\n\n  function prepareRawGridForExport() {\n    var customDataProps = data && {\n      data: data,\n      total: data.length,\n      pageSize: data.length,\n      skip: 0\n    }; // A custom width is needed because otherwise when all pages are exported,\n    // the \"hidden\" PDF grid will be visible.\n\n    var customStyleProp = {\n      style: Object.assign({}, grid.props.style, {\n        width: '1000px'\n      })\n    };\n    var customProps = Object.assign({}, customDataProps, customStyleProp);\n\n    if (columns && columns.length > 0) {\n      var notColumnChildren = getGridNotColumnChildren(grid);\n      return React.cloneElement(grid, customProps, columns.concat(notColumnChildren));\n    } else {\n      return React.cloneElement(grid, customProps);\n    }\n  }\n}\n\nfunction getGridNotColumnChildren(grid) {\n  return React.Children.toArray(grid.props.children).filter(function (child) {\n    return child && child.type.displayName !== 'KendoReactGridColumn';\n  });\n}","map":{"version":3,"sources":["../../../src/grid/provideSaveGridPDF.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { exportElement } from './export-element';\n/**\n * @hidden\n */\nexport function provideSaveGridPDF(savePDF) {\n    return function (grid, pdfExportOptions, callback, data, columns) {\n        if (pdfExportOptions === void 0) { pdfExportOptions = {}; }\n        return saveGridPDF(savePDF, grid, pdfExportOptions, callback, data, columns);\n    };\n}\nfunction saveGridPDF(savePDF, grid, pdfExportOptions, callback, data, columns) {\n    if (pdfExportOptions === void 0) { pdfExportOptions = {}; }\n    renderGrid();\n    var gridOuterWrapper;\n    var gridInnerWrapper;\n    var finalContainer;\n    function renderGrid() {\n        gridOuterWrapper = document.createElement('div');\n        gridOuterWrapper.setAttribute('style', 'position:absolute; left: -5000px; top: 0px;');\n        gridInnerWrapper = document.createElement('div');\n        gridOuterWrapper.appendChild(gridInnerWrapper);\n        document.body.appendChild(gridOuterWrapper);\n        ReactDOM.render(prepareRawGridForExport(), gridInnerWrapper, onGridRendered);\n    }\n    function onGridRendered() {\n        savePDF(prepareFinalElementForExport(), pdfExportOptions, cleanUpAndInvokeCallback);\n    }\n    function cleanUpAndInvokeCallback() {\n        document.body.removeChild(gridOuterWrapper);\n        document.body.removeChild(finalContainer);\n        gridOuterWrapper = finalContainer = undefined;\n        if (callback) {\n            callback();\n        }\n    }\n    function prepareFinalElementForExport() {\n        /* Ultimatelly, there is no need for double DOM-copying of the grid.\n        The one in this method is a copied Angular implementation\n        that has been plugged almost seemlessly. */\n        finalContainer = document.createElement('div');\n        finalContainer.className = 'k-grid-pdf-export-element';\n        var result = exportElement(gridInnerWrapper);\n        finalContainer.appendChild(result);\n        document.body.appendChild(finalContainer);\n        return result;\n    }\n    function prepareRawGridForExport() {\n        var customDataProps = data && { data: data, total: data.length, pageSize: data.length, skip: 0 };\n        // A custom width is needed because otherwise when all pages are exported,\n        // the \"hidden\" PDF grid will be visible.\n        var customStyleProp = { style: Object.assign({}, grid.props.style, { width: '1000px' }) };\n        var customProps = Object.assign({}, customDataProps, customStyleProp);\n        if (columns && columns.length > 0) {\n            var notColumnChildren = getGridNotColumnChildren(grid);\n            return React.cloneElement(grid, customProps, columns.concat(notColumnChildren));\n        }\n        else {\n            return React.cloneElement(grid, customProps);\n        }\n    }\n}\nfunction getGridNotColumnChildren(grid) {\n    return React.Children\n        .toArray(grid.props.children)\n        .filter(function (child) { return child &&\n        child.type.displayName !== 'KendoReactGridColumn'; });\n}\n//# sourceMappingURL=provideSaveGridPDF.js.map"]},"metadata":{},"sourceType":"module"}