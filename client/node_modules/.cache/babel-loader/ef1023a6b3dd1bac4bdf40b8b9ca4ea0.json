{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { getPageMargin } from '../getPageMargin';\nimport { savePDF } from '../savePDF';\nimport { provideSaveGridPDF } from './provideSaveGridPDF';\n/**\n * A React component which facilitates the PDF export of the Grid.\n */\n\nvar GridPDFExport =\n/** @class */\nfunction (_super) {\n  __extends(GridPDFExport, _super);\n\n  function GridPDFExport(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.saveGridPDF = provideSaveGridPDF(_this.getSavePDF());\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  GridPDFExport.prototype.render = function () {\n    return null;\n  }; // tslint:disable:max-line-length\n\n  /**\n   * Saves the content of the Grid as a PDF file.\n   *\n   * @param data - The data can be different from the currently displayed data in the Grid. Can be used to export all Grid pages.\n   * @param callback - The callback that will be executed after the PDF is saved.\n   */\n  // tslint:enable:max-line-length\n\n\n  GridPDFExport.prototype.save = function (data, callback) {\n    this.saveGridPDF(this.getGrid(), Object.assign({}, this.props, {\n      margin: getPageMargin(this.props)\n    }), callback, data, this.getCustomColumns());\n  };\n\n  GridPDFExport.prototype.getSavePDF = function () {\n    return savePDF;\n  };\n\n  GridPDFExport.prototype.getGrid = function () {\n    return React.Children.toArray(this.props.children).find(function (child) {\n      return child && child.type.displayName === 'KendoReactGrid';\n    });\n  };\n\n  GridPDFExport.prototype.getCustomColumns = function () {\n    return React.Children.toArray(this.props.children).filter(function (child) {\n      return child && child.type.displayName === 'KendoReactGridColumn';\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  GridPDFExport.propTypes = {\n    author: PropTypes.string,\n    avoidLinks: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    forcePageBreak: PropTypes.string,\n    keepTogether: PropTypes.string,\n    creator: PropTypes.string,\n    date: PropTypes.instanceOf(Date),\n    imageResolution: PropTypes.number,\n    fileName: PropTypes.string,\n    forceProxy: PropTypes.bool,\n    keywords: PropTypes.string,\n    landscape: PropTypes.bool,\n    margin: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape({\n      left: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      top: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      right: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      bottom: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n    })]),\n    pageTemplate: PropTypes.any,\n    paperSize: PropTypes.any,\n    repeatHeaders: PropTypes.bool,\n    scale: PropTypes.number,\n    proxyData: PropTypes.any,\n    proxyURL: PropTypes.string,\n    proxyTarget: PropTypes.string,\n    producer: PropTypes.string,\n    subject: PropTypes.string,\n    title: PropTypes.string\n  };\n  return GridPDFExport;\n}(React.Component);\n\nexport { GridPDFExport };","map":{"version":3,"sources":["../../../src/grid/GridPDFExport.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { getPageMargin } from '../getPageMargin';\nimport { savePDF } from '../savePDF';\nimport { provideSaveGridPDF } from './provideSaveGridPDF';\n/**\n * A React component which facilitates the PDF export of the Grid.\n */\nvar GridPDFExport = /** @class */ (function (_super) {\n    __extends(GridPDFExport, _super);\n    function GridPDFExport(props) {\n        var _this = _super.call(this, props) || this;\n        _this.saveGridPDF = provideSaveGridPDF(_this.getSavePDF());\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    GridPDFExport.prototype.render = function () {\n        return null;\n    };\n    // tslint:disable:max-line-length\n    /**\n     * Saves the content of the Grid as a PDF file.\n     *\n     * @param data - The data can be different from the currently displayed data in the Grid. Can be used to export all Grid pages.\n     * @param callback - The callback that will be executed after the PDF is saved.\n     */\n    // tslint:enable:max-line-length\n    GridPDFExport.prototype.save = function (data, callback) {\n        this.saveGridPDF(this.getGrid(), Object.assign({}, this.props, { margin: getPageMargin(this.props) }), callback, data, this.getCustomColumns());\n    };\n    GridPDFExport.prototype.getSavePDF = function () {\n        return savePDF;\n    };\n    GridPDFExport.prototype.getGrid = function () {\n        return React.Children\n            .toArray(this.props.children)\n            .find(function (child) { return child &&\n            child.type.displayName === 'KendoReactGrid'; });\n    };\n    GridPDFExport.prototype.getCustomColumns = function () {\n        return React.Children\n            .toArray(this.props.children)\n            .filter(function (child) { return child &&\n            child.type.displayName === 'KendoReactGridColumn'; });\n    };\n    /**\n     * @hidden\n     */\n    GridPDFExport.propTypes = {\n        author: PropTypes.string,\n        avoidLinks: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n        forcePageBreak: PropTypes.string,\n        keepTogether: PropTypes.string,\n        creator: PropTypes.string,\n        date: PropTypes.instanceOf(Date),\n        imageResolution: PropTypes.number,\n        fileName: PropTypes.string,\n        forceProxy: PropTypes.bool,\n        keywords: PropTypes.string,\n        landscape: PropTypes.bool,\n        margin: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape({\n                left: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n                top: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n                right: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n                bottom: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n            })]),\n        pageTemplate: PropTypes.any,\n        paperSize: PropTypes.any,\n        repeatHeaders: PropTypes.bool,\n        scale: PropTypes.number,\n        proxyData: PropTypes.any,\n        proxyURL: PropTypes.string,\n        proxyTarget: PropTypes.string,\n        producer: PropTypes.string,\n        subject: PropTypes.string,\n        title: PropTypes.string\n    };\n    return GridPDFExport;\n}(React.Component));\nexport { GridPDFExport };\n//# sourceMappingURL=GridPDFExport.js.map"]},"metadata":{},"sourceType":"module"}