{"ast":null,"code":"/*!\r\n * body-parser\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module dependencies.\r\n * @private\r\n */\n\nvar deprecate = require('depd')('body-parser');\n/**\r\n * Cache of loaded parsers.\r\n * @private\r\n */\n\n\nvar parsers = Object.create(null);\n/**\r\n * @typedef Parsers\r\n * @type {function}\r\n * @property {function} json\r\n * @property {function} raw\r\n * @property {function} text\r\n * @property {function} urlencoded\r\n */\n\n/**\r\n * Module exports.\r\n * @type {Parsers}\r\n */\n\nexports = module.exports = deprecate.function(bodyParser, 'bodyParser: use individual json/urlencoded middlewares');\n/**\r\n * JSON parser.\r\n * @public\r\n */\n\nObject.defineProperty(exports, 'json', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('json')\n});\n/**\r\n * Raw parser.\r\n * @public\r\n */\n\nObject.defineProperty(exports, 'raw', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('raw')\n});\n/**\r\n * Text parser.\r\n * @public\r\n */\n\nObject.defineProperty(exports, 'text', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('text')\n});\n/**\r\n * URL-encoded parser.\r\n * @public\r\n */\n\nObject.defineProperty(exports, 'urlencoded', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('urlencoded')\n});\n/**\r\n * Create a middleware to parse json and urlencoded bodies.\r\n *\r\n * @param {object} [options]\r\n * @return {function}\r\n * @deprecated\r\n * @public\r\n */\n\nfunction bodyParser(options) {\n  var opts = {}; // exclude type option\n\n  if (options) {\n    for (var prop in options) {\n      if (prop !== 'type') {\n        opts[prop] = options[prop];\n      }\n    }\n  }\n\n  var _urlencoded = exports.urlencoded(opts);\n\n  var _json = exports.json(opts);\n\n  return function bodyParser(req, res, next) {\n    _json(req, res, function (err) {\n      if (err) return next(err);\n\n      _urlencoded(req, res, next);\n    });\n  };\n}\n/**\r\n * Create a getter for loading a parser.\r\n * @private\r\n */\n\n\nfunction createParserGetter(name) {\n  return function get() {\n    return loadParser(name);\n  };\n}\n/**\r\n * Load a parser module.\r\n * @private\r\n */\n\n\nfunction loadParser(parserName) {\n  var parser = parsers[parserName];\n\n  if (parser !== undefined) {\n    return parser;\n  } // this uses a switch for static require analysis\n\n\n  switch (parserName) {\n    case 'json':\n      parser = require('./lib/types/json');\n      break;\n\n    case 'raw':\n      parser = require('./lib/types/raw');\n      break;\n\n    case 'text':\n      parser = require('./lib/types/text');\n      break;\n\n    case 'urlencoded':\n      parser = require('./lib/types/urlencoded');\n      break;\n  } // store to prevent invoking require()\n\n\n  return parsers[parserName] = parser;\n}","map":{"version":3,"sources":["C:/Users/nithya/Desktop/team-4/client/node_modules/body-parser/index.js"],"names":["deprecate","require","parsers","Object","create","exports","module","function","bodyParser","defineProperty","configurable","enumerable","get","createParserGetter","options","opts","prop","_urlencoded","urlencoded","_json","json","req","res","next","err","name","loadParser","parserName","parser","undefined"],"mappings":"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","sourcesContent":["/*!\r\n * body-parser\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar deprecate = require('depd')('body-parser')\r\n\r\n/**\r\n * Cache of loaded parsers.\r\n * @private\r\n */\r\n\r\nvar parsers = Object.create(null)\r\n\r\n/**\r\n * @typedef Parsers\r\n * @type {function}\r\n * @property {function} json\r\n * @property {function} raw\r\n * @property {function} text\r\n * @property {function} urlencoded\r\n */\r\n\r\n/**\r\n * Module exports.\r\n * @type {Parsers}\r\n */\r\n\r\nexports = module.exports = deprecate.function(bodyParser,\r\n  'bodyParser: use individual json/urlencoded middlewares')\r\n\r\n/**\r\n * JSON parser.\r\n * @public\r\n */\r\n\r\nObject.defineProperty(exports, 'json', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: createParserGetter('json')\r\n})\r\n\r\n/**\r\n * Raw parser.\r\n * @public\r\n */\r\n\r\nObject.defineProperty(exports, 'raw', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: createParserGetter('raw')\r\n})\r\n\r\n/**\r\n * Text parser.\r\n * @public\r\n */\r\n\r\nObject.defineProperty(exports, 'text', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: createParserGetter('text')\r\n})\r\n\r\n/**\r\n * URL-encoded parser.\r\n * @public\r\n */\r\n\r\nObject.defineProperty(exports, 'urlencoded', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: createParserGetter('urlencoded')\r\n})\r\n\r\n/**\r\n * Create a middleware to parse json and urlencoded bodies.\r\n *\r\n * @param {object} [options]\r\n * @return {function}\r\n * @deprecated\r\n * @public\r\n */\r\n\r\nfunction bodyParser (options) {\r\n  var opts = {}\r\n\r\n  // exclude type option\r\n  if (options) {\r\n    for (var prop in options) {\r\n      if (prop !== 'type') {\r\n        opts[prop] = options[prop]\r\n      }\r\n    }\r\n  }\r\n\r\n  var _urlencoded = exports.urlencoded(opts)\r\n  var _json = exports.json(opts)\r\n\r\n  return function bodyParser (req, res, next) {\r\n    _json(req, res, function (err) {\r\n      if (err) return next(err)\r\n      _urlencoded(req, res, next)\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Create a getter for loading a parser.\r\n * @private\r\n */\r\n\r\nfunction createParserGetter (name) {\r\n  return function get () {\r\n    return loadParser(name)\r\n  }\r\n}\r\n\r\n/**\r\n * Load a parser module.\r\n * @private\r\n */\r\n\r\nfunction loadParser (parserName) {\r\n  var parser = parsers[parserName]\r\n\r\n  if (parser !== undefined) {\r\n    return parser\r\n  }\r\n\r\n  // this uses a switch for static require analysis\r\n  switch (parserName) {\r\n    case 'json':\r\n      parser = require('./lib/types/json')\r\n      break\r\n    case 'raw':\r\n      parser = require('./lib/types/raw')\r\n      break\r\n    case 'text':\r\n      parser = require('./lib/types/text')\r\n      break\r\n    case 'urlencoded':\r\n      parser = require('./lib/types/urlencoded')\r\n      break\r\n  }\r\n\r\n  // store to prevent invoking require()\r\n  return (parsers[parserName] = parser)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}