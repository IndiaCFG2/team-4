{"ast":null,"code":"/*!\r\n * body-parser\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n'use strict';\n/**\r\n * Module dependencies.\r\n */\n\nvar bytes = require('bytes');\n\nvar debug = require('debug')('body-parser:raw');\n\nvar read = require('../read');\n\nvar typeis = require('type-is');\n/**\r\n * Module exports.\r\n */\n\n\nmodule.exports = raw;\n/**\r\n * Create a middleware to parse raw bodies.\r\n *\r\n * @param {object} [options]\r\n * @return {function}\r\n * @api public\r\n */\n\nfunction raw(options) {\n  var opts = options || {};\n  var inflate = opts.inflate !== false;\n  var limit = typeof opts.limit !== 'number' ? bytes.parse(opts.limit || '100kb') : opts.limit;\n  var type = opts.type || 'application/octet-stream';\n  var verify = opts.verify || false;\n\n  if (verify !== false && typeof verify !== 'function') {\n    throw new TypeError('option verify must be function');\n  } // create the appropriate type checking function\n\n\n  var shouldParse = typeof type !== 'function' ? typeChecker(type) : type;\n\n  function parse(buf) {\n    return buf;\n  }\n\n  return function rawParser(req, res, next) {\n    if (req._body) {\n      debug('body already parsed');\n      next();\n      return;\n    }\n\n    req.body = req.body || {}; // skip requests without bodies\n\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body');\n      next();\n      return;\n    }\n\n    debug('content-type %j', req.headers['content-type']); // determine if request should be parsed\n\n    if (!shouldParse(req)) {\n      debug('skip parsing');\n      next();\n      return;\n    } // read\n\n\n    read(req, res, next, parse, debug, {\n      encoding: null,\n      inflate: inflate,\n      limit: limit,\n      verify: verify\n    });\n  };\n}\n/**\r\n * Get the simple type checker.\r\n *\r\n * @param {string} type\r\n * @return {function}\r\n */\n\n\nfunction typeChecker(type) {\n  return function checkType(req) {\n    return Boolean(typeis(req, type));\n  };\n}","map":{"version":3,"sources":["C:/Users/nithya/Desktop/team-4/client/node_modules/body-parser/lib/types/raw.js"],"names":["bytes","require","debug","read","typeis","module","exports","raw","options","opts","inflate","limit","parse","type","verify","TypeError","shouldParse","typeChecker","buf","rawParser","req","res","next","_body","body","hasBody","headers","encoding","checkType","Boolean"],"mappings":"AAAA;;;;;AAMA;AAEA;;;;AAIA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,iBAAjB,CAAZ;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,SAAD,CAAlB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,SAAD,CAApB;AAEA;;;;;AAIAI,MAAM,CAACC,OAAP,GAAiBC,GAAjB;AAEA;;;;;;;;AAQA,SAASA,GAAT,CAAcC,OAAd,EAAuB;AACrB,MAAIC,IAAI,GAAGD,OAAO,IAAI,EAAtB;AAEA,MAAIE,OAAO,GAAGD,IAAI,CAACC,OAAL,KAAiB,KAA/B;AACA,MAAIC,KAAK,GAAG,OAAOF,IAAI,CAACE,KAAZ,KAAsB,QAAtB,GACRX,KAAK,CAACY,KAAN,CAAYH,IAAI,CAACE,KAAL,IAAc,OAA1B,CADQ,GAERF,IAAI,CAACE,KAFT;AAGA,MAAIE,IAAI,GAAGJ,IAAI,CAACI,IAAL,IAAa,0BAAxB;AACA,MAAIC,MAAM,GAAGL,IAAI,CAACK,MAAL,IAAe,KAA5B;;AAEA,MAAIA,MAAM,KAAK,KAAX,IAAoB,OAAOA,MAAP,KAAkB,UAA1C,EAAsD;AACpD,UAAM,IAAIC,SAAJ,CAAc,gCAAd,CAAN;AACD,GAZoB,CAcrB;;;AACA,MAAIC,WAAW,GAAG,OAAOH,IAAP,KAAgB,UAAhB,GACdI,WAAW,CAACJ,IAAD,CADG,GAEdA,IAFJ;;AAIA,WAASD,KAAT,CAAgBM,GAAhB,EAAqB;AACnB,WAAOA,GAAP;AACD;;AAED,SAAO,SAASC,SAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoC;AACzC,QAAIF,GAAG,CAACG,KAAR,EAAe;AACbrB,MAAAA,KAAK,CAAC,qBAAD,CAAL;AACAoB,MAAAA,IAAI;AACJ;AACD;;AAEDF,IAAAA,GAAG,CAACI,IAAJ,GAAWJ,GAAG,CAACI,IAAJ,IAAY,EAAvB,CAPyC,CASzC;;AACA,QAAI,CAACpB,MAAM,CAACqB,OAAP,CAAeL,GAAf,CAAL,EAA0B;AACxBlB,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACAoB,MAAAA,IAAI;AACJ;AACD;;AAEDpB,IAAAA,KAAK,CAAC,iBAAD,EAAoBkB,GAAG,CAACM,OAAJ,CAAY,cAAZ,CAApB,CAAL,CAhByC,CAkBzC;;AACA,QAAI,CAACV,WAAW,CAACI,GAAD,CAAhB,EAAuB;AACrBlB,MAAAA,KAAK,CAAC,cAAD,CAAL;AACAoB,MAAAA,IAAI;AACJ;AACD,KAvBwC,CAyBzC;;;AACAnB,IAAAA,IAAI,CAACiB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiBV,KAAjB,EAAwBV,KAAxB,EAA+B;AACjCyB,MAAAA,QAAQ,EAAE,IADuB;AAEjCjB,MAAAA,OAAO,EAAEA,OAFwB;AAGjCC,MAAAA,KAAK,EAAEA,KAH0B;AAIjCG,MAAAA,MAAM,EAAEA;AAJyB,KAA/B,CAAJ;AAMD,GAhCD;AAiCD;AAED;;;;;;;;AAOA,SAASG,WAAT,CAAsBJ,IAAtB,EAA4B;AAC1B,SAAO,SAASe,SAAT,CAAoBR,GAApB,EAAyB;AAC9B,WAAOS,OAAO,CAACzB,MAAM,CAACgB,GAAD,EAAMP,IAAN,CAAP,CAAd;AACD,GAFD;AAGD","sourcesContent":["/*!\r\n * body-parser\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar bytes = require('bytes')\r\nvar debug = require('debug')('body-parser:raw')\r\nvar read = require('../read')\r\nvar typeis = require('type-is')\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = raw\r\n\r\n/**\r\n * Create a middleware to parse raw bodies.\r\n *\r\n * @param {object} [options]\r\n * @return {function}\r\n * @api public\r\n */\r\n\r\nfunction raw (options) {\r\n  var opts = options || {}\r\n\r\n  var inflate = opts.inflate !== false\r\n  var limit = typeof opts.limit !== 'number'\r\n    ? bytes.parse(opts.limit || '100kb')\r\n    : opts.limit\r\n  var type = opts.type || 'application/octet-stream'\r\n  var verify = opts.verify || false\r\n\r\n  if (verify !== false && typeof verify !== 'function') {\r\n    throw new TypeError('option verify must be function')\r\n  }\r\n\r\n  // create the appropriate type checking function\r\n  var shouldParse = typeof type !== 'function'\r\n    ? typeChecker(type)\r\n    : type\r\n\r\n  function parse (buf) {\r\n    return buf\r\n  }\r\n\r\n  return function rawParser (req, res, next) {\r\n    if (req._body) {\r\n      debug('body already parsed')\r\n      next()\r\n      return\r\n    }\r\n\r\n    req.body = req.body || {}\r\n\r\n    // skip requests without bodies\r\n    if (!typeis.hasBody(req)) {\r\n      debug('skip empty body')\r\n      next()\r\n      return\r\n    }\r\n\r\n    debug('content-type %j', req.headers['content-type'])\r\n\r\n    // determine if request should be parsed\r\n    if (!shouldParse(req)) {\r\n      debug('skip parsing')\r\n      next()\r\n      return\r\n    }\r\n\r\n    // read\r\n    read(req, res, next, parse, debug, {\r\n      encoding: null,\r\n      inflate: inflate,\r\n      limit: limit,\r\n      verify: verify\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Get the simple type checker.\r\n *\r\n * @param {string} type\r\n * @return {function}\r\n */\r\n\r\nfunction typeChecker (type) {\r\n  return function checkType (req) {\r\n    return Boolean(typeis(req, type))\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}