{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n    case 'raw':\n      return true;\n\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n\n      default:\n        if (retried) return; // undefined\n\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n}\n\n; // Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\n\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n} // StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\n\n\nexports.StringDecoder = StringDecoder;\n\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer\n\nStringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\n\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n}; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\n\n\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n} // Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\n\n\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n\n    return nb;\n  }\n\n  return 0;\n} // Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\n\n\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n} // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\n\n\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n} // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\n\n\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n} // For UTF-8, a replacement character is added when ending on a partial\n// character.\n\n\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n} // UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\n\n\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n\n    return r;\n  }\n\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n} // For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\n\n\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n} // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\n\n\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}","map":{"version":3,"sources":["C:/Users/nithya/Desktop/team-4/client/node_modules/string_decoder/lib/string_decoder.js"],"names":["Buffer","require","isEncoding","encoding","toLowerCase","_normalizeEncoding","enc","retried","normalizeEncoding","nenc","Error","exports","StringDecoder","nb","text","utf16Text","end","utf16End","fillLast","utf8FillLast","base64Text","base64End","write","simpleWrite","simpleEnd","lastNeed","lastTotal","lastChar","allocUnsafe","prototype","buf","length","r","i","undefined","utf8End","utf8Text","copy","toString","utf8CheckByte","byte","utf8CheckIncomplete","self","j","utf8CheckExtraBytes","p","total","c","charCodeAt","slice","n"],"mappings":"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","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\n/*<replacement>*/\r\n\r\nvar Buffer = require('safe-buffer').Buffer;\r\n/*</replacement>*/\r\n\r\nvar isEncoding = Buffer.isEncoding || function (encoding) {\r\n  encoding = '' + encoding;\r\n  switch (encoding && encoding.toLowerCase()) {\r\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n\r\nfunction _normalizeEncoding(enc) {\r\n  if (!enc) return 'utf8';\r\n  var retried;\r\n  while (true) {\r\n    switch (enc) {\r\n      case 'utf8':\r\n      case 'utf-8':\r\n        return 'utf8';\r\n      case 'ucs2':\r\n      case 'ucs-2':\r\n      case 'utf16le':\r\n      case 'utf-16le':\r\n        return 'utf16le';\r\n      case 'latin1':\r\n      case 'binary':\r\n        return 'latin1';\r\n      case 'base64':\r\n      case 'ascii':\r\n      case 'hex':\r\n        return enc;\r\n      default:\r\n        if (retried) return; // undefined\r\n        enc = ('' + enc).toLowerCase();\r\n        retried = true;\r\n    }\r\n  }\r\n};\r\n\r\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\r\n// modules monkey-patch it to support additional encodings\r\nfunction normalizeEncoding(enc) {\r\n  var nenc = _normalizeEncoding(enc);\r\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\r\n  return nenc || enc;\r\n}\r\n\r\n// StringDecoder provides an interface for efficiently splitting a series of\r\n// buffers into a series of JS strings without breaking apart multi-byte\r\n// characters.\r\nexports.StringDecoder = StringDecoder;\r\nfunction StringDecoder(encoding) {\r\n  this.encoding = normalizeEncoding(encoding);\r\n  var nb;\r\n  switch (this.encoding) {\r\n    case 'utf16le':\r\n      this.text = utf16Text;\r\n      this.end = utf16End;\r\n      nb = 4;\r\n      break;\r\n    case 'utf8':\r\n      this.fillLast = utf8FillLast;\r\n      nb = 4;\r\n      break;\r\n    case 'base64':\r\n      this.text = base64Text;\r\n      this.end = base64End;\r\n      nb = 3;\r\n      break;\r\n    default:\r\n      this.write = simpleWrite;\r\n      this.end = simpleEnd;\r\n      return;\r\n  }\r\n  this.lastNeed = 0;\r\n  this.lastTotal = 0;\r\n  this.lastChar = Buffer.allocUnsafe(nb);\r\n}\r\n\r\nStringDecoder.prototype.write = function (buf) {\r\n  if (buf.length === 0) return '';\r\n  var r;\r\n  var i;\r\n  if (this.lastNeed) {\r\n    r = this.fillLast(buf);\r\n    if (r === undefined) return '';\r\n    i = this.lastNeed;\r\n    this.lastNeed = 0;\r\n  } else {\r\n    i = 0;\r\n  }\r\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\r\n  return r || '';\r\n};\r\n\r\nStringDecoder.prototype.end = utf8End;\r\n\r\n// Returns only complete characters in a Buffer\r\nStringDecoder.prototype.text = utf8Text;\r\n\r\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\r\nStringDecoder.prototype.fillLast = function (buf) {\r\n  if (this.lastNeed <= buf.length) {\r\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\r\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\r\n  }\r\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\r\n  this.lastNeed -= buf.length;\r\n};\r\n\r\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\r\n// continuation byte. If an invalid byte is detected, -2 is returned.\r\nfunction utf8CheckByte(byte) {\r\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\r\n  return byte >> 6 === 0x02 ? -1 : -2;\r\n}\r\n\r\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\r\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\r\n// needed to complete the UTF-8 character (if applicable) are returned.\r\nfunction utf8CheckIncomplete(self, buf, i) {\r\n  var j = buf.length - 1;\r\n  if (j < i) return 0;\r\n  var nb = utf8CheckByte(buf[j]);\r\n  if (nb >= 0) {\r\n    if (nb > 0) self.lastNeed = nb - 1;\r\n    return nb;\r\n  }\r\n  if (--j < i || nb === -2) return 0;\r\n  nb = utf8CheckByte(buf[j]);\r\n  if (nb >= 0) {\r\n    if (nb > 0) self.lastNeed = nb - 2;\r\n    return nb;\r\n  }\r\n  if (--j < i || nb === -2) return 0;\r\n  nb = utf8CheckByte(buf[j]);\r\n  if (nb >= 0) {\r\n    if (nb > 0) {\r\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\r\n    }\r\n    return nb;\r\n  }\r\n  return 0;\r\n}\r\n\r\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\r\n// needed or are available. If we see a non-continuation byte where we expect\r\n// one, we \"replace\" the validated continuation bytes we've seen so far with\r\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\r\n// behavior. The continuation byte check is included three times in the case\r\n// where all of the continuation bytes for a character exist in the same buffer.\r\n// It is also done this way as a slight performance increase instead of using a\r\n// loop.\r\nfunction utf8CheckExtraBytes(self, buf, p) {\r\n  if ((buf[0] & 0xC0) !== 0x80) {\r\n    self.lastNeed = 0;\r\n    return '\\ufffd';\r\n  }\r\n  if (self.lastNeed > 1 && buf.length > 1) {\r\n    if ((buf[1] & 0xC0) !== 0x80) {\r\n      self.lastNeed = 1;\r\n      return '\\ufffd';\r\n    }\r\n    if (self.lastNeed > 2 && buf.length > 2) {\r\n      if ((buf[2] & 0xC0) !== 0x80) {\r\n        self.lastNeed = 2;\r\n        return '\\ufffd';\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\r\nfunction utf8FillLast(buf) {\r\n  var p = this.lastTotal - this.lastNeed;\r\n  var r = utf8CheckExtraBytes(this, buf, p);\r\n  if (r !== undefined) return r;\r\n  if (this.lastNeed <= buf.length) {\r\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\r\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\r\n  }\r\n  buf.copy(this.lastChar, p, 0, buf.length);\r\n  this.lastNeed -= buf.length;\r\n}\r\n\r\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\r\n// partial character, the character's bytes are buffered until the required\r\n// number of bytes are available.\r\nfunction utf8Text(buf, i) {\r\n  var total = utf8CheckIncomplete(this, buf, i);\r\n  if (!this.lastNeed) return buf.toString('utf8', i);\r\n  this.lastTotal = total;\r\n  var end = buf.length - (total - this.lastNeed);\r\n  buf.copy(this.lastChar, 0, end);\r\n  return buf.toString('utf8', i, end);\r\n}\r\n\r\n// For UTF-8, a replacement character is added when ending on a partial\r\n// character.\r\nfunction utf8End(buf) {\r\n  var r = buf && buf.length ? this.write(buf) : '';\r\n  if (this.lastNeed) return r + '\\ufffd';\r\n  return r;\r\n}\r\n\r\n// UTF-16LE typically needs two bytes per character, but even if we have an even\r\n// number of bytes available, we need to check if we end on a leading/high\r\n// surrogate. In that case, we need to wait for the next two bytes in order to\r\n// decode the last character properly.\r\nfunction utf16Text(buf, i) {\r\n  if ((buf.length - i) % 2 === 0) {\r\n    var r = buf.toString('utf16le', i);\r\n    if (r) {\r\n      var c = r.charCodeAt(r.length - 1);\r\n      if (c >= 0xD800 && c <= 0xDBFF) {\r\n        this.lastNeed = 2;\r\n        this.lastTotal = 4;\r\n        this.lastChar[0] = buf[buf.length - 2];\r\n        this.lastChar[1] = buf[buf.length - 1];\r\n        return r.slice(0, -1);\r\n      }\r\n    }\r\n    return r;\r\n  }\r\n  this.lastNeed = 1;\r\n  this.lastTotal = 2;\r\n  this.lastChar[0] = buf[buf.length - 1];\r\n  return buf.toString('utf16le', i, buf.length - 1);\r\n}\r\n\r\n// For UTF-16LE we do not explicitly append special replacement characters if we\r\n// end on a partial character, we simply let v8 handle that.\r\nfunction utf16End(buf) {\r\n  var r = buf && buf.length ? this.write(buf) : '';\r\n  if (this.lastNeed) {\r\n    var end = this.lastTotal - this.lastNeed;\r\n    return r + this.lastChar.toString('utf16le', 0, end);\r\n  }\r\n  return r;\r\n}\r\n\r\nfunction base64Text(buf, i) {\r\n  var n = (buf.length - i) % 3;\r\n  if (n === 0) return buf.toString('base64', i);\r\n  this.lastNeed = 3 - n;\r\n  this.lastTotal = 3;\r\n  if (n === 1) {\r\n    this.lastChar[0] = buf[buf.length - 1];\r\n  } else {\r\n    this.lastChar[0] = buf[buf.length - 2];\r\n    this.lastChar[1] = buf[buf.length - 1];\r\n  }\r\n  return buf.toString('base64', i, buf.length - n);\r\n}\r\n\r\nfunction base64End(buf) {\r\n  var r = buf && buf.length ? this.write(buf) : '';\r\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\r\n  return r;\r\n}\r\n\r\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\r\nfunction simpleWrite(buf) {\r\n  return buf.toString(this.encoding);\r\n}\r\n\r\nfunction simpleEnd(buf) {\r\n  return buf && buf.length ? this.write(buf) : '';\r\n}"]},"metadata":{},"sourceType":"script"}