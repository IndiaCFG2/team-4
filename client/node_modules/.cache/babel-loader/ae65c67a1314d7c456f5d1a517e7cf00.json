{"ast":null,"code":"var KEY_STR = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar fromCharCode = String.fromCharCode;\nexport function encodeBase64(plainText) {\n  var input = encodeUTF8(plainText);\n  var output = \"\";\n  var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n  var i = 0;\n\n  while (i < input.length) {\n    chr1 = input.charCodeAt(i++);\n    chr2 = input.charCodeAt(i++);\n    chr3 = input.charCodeAt(i++);\n    enc1 = chr1 >> 2;\n    enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n    enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n    enc4 = chr3 & 63;\n\n    if (isNaN(chr2)) {\n      enc3 = enc4 = 64;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n\n    output = output + KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) + KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);\n  }\n\n  return output;\n}\n\nfunction encodeUTF8(input) {\n  var output = \"\";\n\n  for (var i = 0; i < input.length; i++) {\n    var c = input.charCodeAt(i);\n\n    if (c < 0x80) {\n      // One byte\n      output += fromCharCode(c);\n    } else if (c < 0x800) {\n      // Two bytes\n      output += fromCharCode(0xC0 | c >>> 6);\n      output += fromCharCode(0x80 | c & 0x3f);\n    } else if (c < 0x10000) {\n      // Three bytes\n      output += fromCharCode(0xE0 | c >>> 12);\n      output += fromCharCode(0x80 | c >>> 6 & 0x3f);\n      output += fromCharCode(0x80 | c & 0x3f);\n    }\n  }\n\n  return output;\n}","map":{"version":3,"sources":["C:/Users/nithya/Desktop/team-4/client/node_modules/@progress/kendo-file-saver/dist/es/base64.js"],"names":["KEY_STR","fromCharCode","String","encodeBase64","plainText","input","encodeUTF8","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","i","length","charCodeAt","isNaN","charAt","c"],"mappings":"AAAA,IAAIA,OAAO,GAAG,mEAAd;AACA,IAAIC,YAAY,GAAGC,MAAM,CAACD,YAA1B;AAEA,OAAO,SAASE,YAAT,CAAsBC,SAAtB,EAAiC;AACtC,MAAIC,KAAK,GAAGC,UAAU,CAACF,SAAD,CAAtB;AACA,MAAIG,MAAM,GAAG,EAAb;AACA,MAAIC,IAAJ,EAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCC,IAAlC,EAAwCC,IAAxC;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,SAAOA,CAAC,GAAGV,KAAK,CAACW,MAAjB,EAAyB;AACvBR,IAAAA,IAAI,GAAGH,KAAK,CAACY,UAAN,CAAiBF,CAAC,EAAlB,CAAP;AACAN,IAAAA,IAAI,GAAGJ,KAAK,CAACY,UAAN,CAAiBF,CAAC,EAAlB,CAAP;AACAL,IAAAA,IAAI,GAAGL,KAAK,CAACY,UAAN,CAAiBF,CAAC,EAAlB,CAAP;AAEAJ,IAAAA,IAAI,GAAGH,IAAI,IAAI,CAAf;AACAI,IAAAA,IAAI,GAAI,CAACJ,IAAI,GAAG,CAAR,KAAc,CAAf,GAAqBC,IAAI,IAAI,CAApC;AACAI,IAAAA,IAAI,GAAI,CAACJ,IAAI,GAAG,EAAR,KAAe,CAAhB,GAAsBC,IAAI,IAAI,CAArC;AACAI,IAAAA,IAAI,GAAGJ,IAAI,GAAG,EAAd;;AAEA,QAAIQ,KAAK,CAACT,IAAD,CAAT,EAAiB;AACfI,MAAAA,IAAI,GAAGC,IAAI,GAAG,EAAd;AACD,KAFD,MAEO,IAAII,KAAK,CAACR,IAAD,CAAT,EAAiB;AACtBI,MAAAA,IAAI,GAAG,EAAP;AACD;;AAEDP,IAAAA,MAAM,GAAGA,MAAM,GACbP,OAAO,CAACmB,MAAR,CAAeR,IAAf,CADO,GACgBX,OAAO,CAACmB,MAAR,CAAeP,IAAf,CADhB,GAEPZ,OAAO,CAACmB,MAAR,CAAeN,IAAf,CAFO,GAEgBb,OAAO,CAACmB,MAAR,CAAeL,IAAf,CAFzB;AAGD;;AAED,SAAOP,MAAP;AACD;;AAED,SAASD,UAAT,CAAoBD,KAApB,EAA2B;AACzB,MAAIE,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACW,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIK,CAAC,GAAGf,KAAK,CAACY,UAAN,CAAiBF,CAAjB,CAAR;;AAEA,QAAIK,CAAC,GAAG,IAAR,EAAc;AACZ;AACAb,MAAAA,MAAM,IAAIN,YAAY,CAACmB,CAAD,CAAtB;AACD,KAHD,MAGO,IAAIA,CAAC,GAAG,KAAR,EAAe;AACpB;AACAb,MAAAA,MAAM,IAAIN,YAAY,CAAC,OAAQmB,CAAC,KAAK,CAAf,CAAtB;AACAb,MAAAA,MAAM,IAAIN,YAAY,CAAC,OAAQmB,CAAC,GAAG,IAAb,CAAtB;AACD,KAJM,MAIA,IAAIA,CAAC,GAAG,OAAR,EAAiB;AACtB;AACAb,MAAAA,MAAM,IAAIN,YAAY,CAAC,OAAQmB,CAAC,KAAK,EAAf,CAAtB;AACAb,MAAAA,MAAM,IAAIN,YAAY,CAAC,OAAQmB,CAAC,KAAK,CAAN,GAAU,IAAnB,CAAtB;AACAb,MAAAA,MAAM,IAAIN,YAAY,CAAC,OAAQmB,CAAC,GAAG,IAAb,CAAtB;AACD;AACF;;AAED,SAAOb,MAAP;AACD","sourcesContent":["var KEY_STR = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar fromCharCode = String.fromCharCode;\n\nexport function encodeBase64(plainText) {\n  var input = encodeUTF8(plainText);\n  var output = \"\";\n  var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n  var i = 0;\n\n  while (i < input.length) {\n    chr1 = input.charCodeAt(i++);\n    chr2 = input.charCodeAt(i++);\n    chr3 = input.charCodeAt(i++);\n\n    enc1 = chr1 >> 2;\n    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n    enc4 = chr3 & 63;\n\n    if (isNaN(chr2)) {\n      enc3 = enc4 = 64;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n\n    output = output +\n      KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) +\n      KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);\n  }\n\n  return output;\n}\n\nfunction encodeUTF8(input) {\n  var output = \"\";\n\n  for (var i = 0; i < input.length; i++) {\n    var c = input.charCodeAt(i);\n\n    if (c < 0x80) {\n      // One byte\n      output += fromCharCode(c);\n    } else if (c < 0x800) {\n      // Two bytes\n      output += fromCharCode(0xC0 | (c >>> 6));\n      output += fromCharCode(0x80 | (c & 0x3f));\n    } else if (c < 0x10000) {\n      // Three bytes\n      output += fromCharCode(0xE0 | (c >>> 12));\n      output += fromCharCode(0x80 | (c >>> 6 & 0x3f));\n      output += fromCharCode(0x80 | (c & 0x3f));\n    }\n  }\n\n  return output;\n}\n"]},"metadata":{},"sourceType":"module"}