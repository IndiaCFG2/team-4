{"ast":null,"code":"import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { exportElement } from './export-element';\n/**\n * @hidden\n */\n\nexport function provideSaveTreeListPDF(savePDF) {\n  return function (treeList, pdfExportOptions, callback, data, columns) {\n    if (pdfExportOptions === void 0) {\n      pdfExportOptions = {};\n    }\n\n    return saveTreeListPDF(savePDF, treeList, pdfExportOptions, callback, data, columns);\n  };\n}\n\nfunction saveTreeListPDF(savePDF, treeList, pdfExportOptions, callback, data, columns) {\n  if (pdfExportOptions === void 0) {\n    pdfExportOptions = {};\n  }\n\n  rendertreeList();\n  var treeListOuterWrapper;\n  var treeListInnerWrapper;\n  var finalContainer;\n\n  function rendertreeList() {\n    treeListOuterWrapper = document.createElement('div');\n    treeListOuterWrapper.setAttribute('style', 'position:absolute; left: -5000px; top: 0px;');\n    treeListInnerWrapper = document.createElement('div');\n    treeListOuterWrapper.appendChild(treeListInnerWrapper);\n    document.body.appendChild(treeListOuterWrapper);\n    ReactDOM.render(prepareRawTreeListForExport(), treeListInnerWrapper, ontreeListRendered);\n  }\n\n  function ontreeListRendered() {\n    savePDF(prepareFinalElementForExport(), pdfExportOptions, cleanUpAndInvokeCallback);\n  }\n\n  function cleanUpAndInvokeCallback() {\n    document.body.removeChild(treeListOuterWrapper);\n    document.body.removeChild(finalContainer);\n    treeListOuterWrapper = finalContainer = undefined;\n\n    if (callback) {\n      callback();\n    }\n  }\n\n  function prepareFinalElementForExport() {\n    /* Ultimatelly, there is no need for double DOM-copying of the treeList.\n    The one in this method is a copied Angular implementation\n    that has been plugged almost seemlessly. */\n    finalContainer = document.createElement('div');\n    finalContainer.className = 'k-treelist-pdf-export-element';\n    var result = exportElement(treeListInnerWrapper);\n    finalContainer.appendChild(result);\n    document.body.appendChild(finalContainer);\n    return finalContainer;\n  }\n\n  function prepareRawTreeListForExport() {\n    var customDataProps = pdfExportOptions.allPages && data ? {\n      data: data,\n      take: Number.MAX_VALUE,\n      skip: 0\n    } : {}; // A custom width is needed because otherwise when all pages are exported,\n    // the \"hidden\" PDF treeList will be visible.\n\n    var customStyleProp = {\n      style: Object.assign({}, treeList.props.style, {\n        width: '1000px'\n      })\n    };\n    var customProps = Object.assign({}, customDataProps, customStyleProp);\n\n    if (columns && columns.length > 0) {\n      return React.cloneElement(treeList, Object.assign({}, customProps, {\n        columns: columns\n      }));\n    } else {\n      return React.cloneElement(treeList, customProps);\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/treelist/provideSaveTreeListPDF.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as ReactDOM from 'react-dom';\nimport * as React from 'react';\nimport { exportElement } from './export-element';\n/**\n * @hidden\n */\nexport function provideSaveTreeListPDF(savePDF) {\n    return function (treeList, pdfExportOptions, callback, data, columns) {\n        if (pdfExportOptions === void 0) { pdfExportOptions = {}; }\n        return saveTreeListPDF(savePDF, treeList, pdfExportOptions, callback, data, columns);\n    };\n}\nfunction saveTreeListPDF(savePDF, treeList, pdfExportOptions, callback, data, columns) {\n    if (pdfExportOptions === void 0) { pdfExportOptions = {}; }\n    rendertreeList();\n    var treeListOuterWrapper;\n    var treeListInnerWrapper;\n    var finalContainer;\n    function rendertreeList() {\n        treeListOuterWrapper = document.createElement('div');\n        treeListOuterWrapper.setAttribute('style', 'position:absolute; left: -5000px; top: 0px;');\n        treeListInnerWrapper = document.createElement('div');\n        treeListOuterWrapper.appendChild(treeListInnerWrapper);\n        document.body.appendChild(treeListOuterWrapper);\n        ReactDOM.render(prepareRawTreeListForExport(), treeListInnerWrapper, ontreeListRendered);\n    }\n    function ontreeListRendered() {\n        savePDF(prepareFinalElementForExport(), pdfExportOptions, cleanUpAndInvokeCallback);\n    }\n    function cleanUpAndInvokeCallback() {\n        document.body.removeChild(treeListOuterWrapper);\n        document.body.removeChild(finalContainer);\n        treeListOuterWrapper = finalContainer = undefined;\n        if (callback) {\n            callback();\n        }\n    }\n    function prepareFinalElementForExport() {\n        /* Ultimatelly, there is no need for double DOM-copying of the treeList.\n        The one in this method is a copied Angular implementation\n        that has been plugged almost seemlessly. */\n        finalContainer = document.createElement('div');\n        finalContainer.className = 'k-treelist-pdf-export-element';\n        var result = exportElement(treeListInnerWrapper);\n        finalContainer.appendChild(result);\n        document.body.appendChild(finalContainer);\n        return finalContainer;\n    }\n    function prepareRawTreeListForExport() {\n        var customDataProps = pdfExportOptions.allPages && data ? { data: data, take: Number.MAX_VALUE, skip: 0 } : {};\n        // A custom width is needed because otherwise when all pages are exported,\n        // the \"hidden\" PDF treeList will be visible.\n        var customStyleProp = { style: Object.assign({}, treeList.props.style, { width: '1000px' }) };\n        var customProps = Object.assign({}, customDataProps, customStyleProp);\n        if (columns && columns.length > 0) {\n            return React.cloneElement(treeList, Object.assign({}, customProps, { columns: columns }));\n        }\n        else {\n            return React.cloneElement(treeList, customProps);\n        }\n    }\n}\n//# sourceMappingURL=provideSaveTreeListPDF.js.map"]},"metadata":{},"sourceType":"module"}