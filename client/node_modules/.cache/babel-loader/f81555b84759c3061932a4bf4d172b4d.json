{"ast":null,"code":"'use strict';\n\nvar TYPED_OK = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Int32Array !== 'undefined';\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj\n/*from1, from2, from3, ...*/\n) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  while (sources.length) {\n    var source = sources.shift();\n\n    if (!source) {\n      continue;\n    }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n}; // reduce buffer size, avoiding mem copy\n\n\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) {\n    return buf;\n  }\n\n  if (buf.subarray) {\n    return buf.subarray(0, size);\n  }\n\n  buf.length = size;\n  return buf;\n};\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    } // Fallback to ordinary array\n\n\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result; // calculate data length\n\n    len = 0;\n\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    } // join chunks\n\n\n    result = new Uint8Array(len);\n    pos = 0;\n\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n}; // Enable/Disable typed arrays use, for testing\n//\n\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8 = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8 = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);","map":{"version":3,"sources":["C:/Users/nithya/Desktop/team-4/client/node_modules/pako/lib/utils/common.js"],"names":["TYPED_OK","Uint8Array","Uint16Array","Int32Array","_has","obj","key","Object","prototype","hasOwnProperty","call","exports","assign","sources","Array","slice","arguments","length","source","shift","TypeError","p","shrinkBuf","buf","size","subarray","fnTyped","arraySet","dest","src","src_offs","len","dest_offs","set","i","flattenChunks","chunks","l","pos","chunk","result","fnUntyped","concat","apply","setTyped","on","Buf8","Buf16","Buf32"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\n\r\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\r\n                (typeof Uint16Array !== 'undefined') &&\r\n                (typeof Int32Array !== 'undefined');\r\n\r\nfunction _has(obj, key) {\r\n  return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\n\r\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\r\n  var sources = Array.prototype.slice.call(arguments, 1);\r\n  while (sources.length) {\r\n    var source = sources.shift();\r\n    if (!source) { continue; }\r\n\r\n    if (typeof source !== 'object') {\r\n      throw new TypeError(source + 'must be non-object');\r\n    }\r\n\r\n    for (var p in source) {\r\n      if (_has(source, p)) {\r\n        obj[p] = source[p];\r\n      }\r\n    }\r\n  }\r\n\r\n  return obj;\r\n};\r\n\r\n\r\n// reduce buffer size, avoiding mem copy\r\nexports.shrinkBuf = function (buf, size) {\r\n  if (buf.length === size) { return buf; }\r\n  if (buf.subarray) { return buf.subarray(0, size); }\r\n  buf.length = size;\r\n  return buf;\r\n};\r\n\r\n\r\nvar fnTyped = {\r\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\r\n    if (src.subarray && dest.subarray) {\r\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\r\n      return;\r\n    }\r\n    // Fallback to ordinary array\r\n    for (var i = 0; i < len; i++) {\r\n      dest[dest_offs + i] = src[src_offs + i];\r\n    }\r\n  },\r\n  // Join array of chunks to single array.\r\n  flattenChunks: function (chunks) {\r\n    var i, l, len, pos, chunk, result;\r\n\r\n    // calculate data length\r\n    len = 0;\r\n    for (i = 0, l = chunks.length; i < l; i++) {\r\n      len += chunks[i].length;\r\n    }\r\n\r\n    // join chunks\r\n    result = new Uint8Array(len);\r\n    pos = 0;\r\n    for (i = 0, l = chunks.length; i < l; i++) {\r\n      chunk = chunks[i];\r\n      result.set(chunk, pos);\r\n      pos += chunk.length;\r\n    }\r\n\r\n    return result;\r\n  }\r\n};\r\n\r\nvar fnUntyped = {\r\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\r\n    for (var i = 0; i < len; i++) {\r\n      dest[dest_offs + i] = src[src_offs + i];\r\n    }\r\n  },\r\n  // Join array of chunks to single array.\r\n  flattenChunks: function (chunks) {\r\n    return [].concat.apply([], chunks);\r\n  }\r\n};\r\n\r\n\r\n// Enable/Disable typed arrays use, for testing\r\n//\r\nexports.setTyped = function (on) {\r\n  if (on) {\r\n    exports.Buf8  = Uint8Array;\r\n    exports.Buf16 = Uint16Array;\r\n    exports.Buf32 = Int32Array;\r\n    exports.assign(exports, fnTyped);\r\n  } else {\r\n    exports.Buf8  = Array;\r\n    exports.Buf16 = Array;\r\n    exports.Buf32 = Array;\r\n    exports.assign(exports, fnUntyped);\r\n  }\r\n};\r\n\r\nexports.setTyped(TYPED_OK);\r\n"]},"metadata":{},"sourceType":"script"}