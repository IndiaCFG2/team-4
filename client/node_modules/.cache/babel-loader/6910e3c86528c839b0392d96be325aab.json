{"ast":null,"code":"/*!\r\n * media-typer\r\n * Copyright(c) 2014 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n/**\r\n * RegExp to match *( \";\" parameter ) in RFC 2616 sec 3.7\r\n *\r\n * parameter     = token \"=\" ( token | quoted-string )\r\n * token         = 1*<any CHAR except CTLs or separators>\r\n * separators    = \"(\" | \")\" | \"<\" | \">\" | \"@\"\r\n *               | \",\" | \";\" | \":\" | \"\\\" | <\">\r\n *               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\r\n *               | \"{\" | \"}\" | SP | HT\r\n * quoted-string = ( <\"> *(qdtext | quoted-pair ) <\"> )\r\n * qdtext        = <any TEXT except <\">>\r\n * quoted-pair   = \"\\\" CHAR\r\n * CHAR          = <any US-ASCII character (octets 0 - 127)>\r\n * TEXT          = <any OCTET except CTLs, but including LWS>\r\n * LWS           = [CRLF] 1*( SP | HT )\r\n * CRLF          = CR LF\r\n * CR            = <US-ASCII CR, carriage return (13)>\r\n * LF            = <US-ASCII LF, linefeed (10)>\r\n * SP            = <US-ASCII SP, space (32)>\r\n * SHT           = <US-ASCII HT, horizontal-tab (9)>\r\n * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>\r\n * OCTET         = <any 8-bit sequence of data>\r\n */\nvar paramRegExp = /; *([!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) *= *(\"(?:[ !\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u0020-\\u007e])*\"|[!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) */g;\nvar textRegExp = /^[\\u0020-\\u007e\\u0080-\\u00ff]+$/;\nvar tokenRegExp = /^[!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+$/;\n/**\r\n * RegExp to match quoted-pair in RFC 2616\r\n *\r\n * quoted-pair = \"\\\" CHAR\r\n * CHAR        = <any US-ASCII character (octets 0 - 127)>\r\n */\n\nvar qescRegExp = /\\\\([\\u0000-\\u007f])/g;\n/**\r\n * RegExp to match chars that must be quoted-pair in RFC 2616\r\n */\n\nvar quoteRegExp = /([\\\\\"])/g;\n/**\r\n * RegExp to match type in RFC 6838\r\n *\r\n * type-name = restricted-name\r\n * subtype-name = restricted-name\r\n * restricted-name = restricted-name-first *126restricted-name-chars\r\n * restricted-name-first  = ALPHA / DIGIT\r\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\r\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\r\n * restricted-name-chars =/ \".\" ; Characters before first dot always\r\n *                              ; specify a facet name\r\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\r\n *                              ; specify a structured syntax suffix\r\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\r\n * DIGIT =  %x30-39             ; 0-9\r\n */\n\nvar subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;\nvar typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;\nvar typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;\n/**\r\n * Module exports.\r\n */\n\nexports.format = format;\nexports.parse = parse;\n/**\r\n * Format object to media type.\r\n *\r\n * @param {object} obj\r\n * @return {string}\r\n * @api public\r\n */\n\nfunction format(obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required');\n  }\n\n  var parameters = obj.parameters;\n  var subtype = obj.subtype;\n  var suffix = obj.suffix;\n  var type = obj.type;\n\n  if (!type || !typeNameRegExp.test(type)) {\n    throw new TypeError('invalid type');\n  }\n\n  if (!subtype || !subtypeNameRegExp.test(subtype)) {\n    throw new TypeError('invalid subtype');\n  } // format as type/subtype\n\n\n  var string = type + '/' + subtype; // append +suffix\n\n  if (suffix) {\n    if (!typeNameRegExp.test(suffix)) {\n      throw new TypeError('invalid suffix');\n    }\n\n    string += '+' + suffix;\n  } // append parameters\n\n\n  if (parameters && typeof parameters === 'object') {\n    var param;\n    var params = Object.keys(parameters).sort();\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i];\n\n      if (!tokenRegExp.test(param)) {\n        throw new TypeError('invalid parameter name');\n      }\n\n      string += '; ' + param + '=' + qstring(parameters[param]);\n    }\n  }\n\n  return string;\n}\n/**\r\n * Parse media type to object.\r\n *\r\n * @param {string|object} string\r\n * @return {Object}\r\n * @api public\r\n */\n\n\nfunction parse(string) {\n  if (!string) {\n    throw new TypeError('argument string is required');\n  } // support req/res-like objects as argument\n\n\n  if (typeof string === 'object') {\n    string = getcontenttype(string);\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string');\n  }\n\n  var index = string.indexOf(';');\n  var type = index !== -1 ? string.substr(0, index) : string;\n  var key;\n  var match;\n  var obj = splitType(type);\n  var params = {};\n  var value;\n  paramRegExp.lastIndex = index;\n\n  while (match = paramRegExp.exec(string)) {\n    if (match.index !== index) {\n      throw new TypeError('invalid parameter format');\n    }\n\n    index += match[0].length;\n    key = match[1].toLowerCase();\n    value = match[2];\n\n    if (value[0] === '\"') {\n      // remove quotes and escapes\n      value = value.substr(1, value.length - 2).replace(qescRegExp, '$1');\n    }\n\n    params[key] = value;\n  }\n\n  if (index !== -1 && index !== string.length) {\n    throw new TypeError('invalid parameter format');\n  }\n\n  obj.parameters = params;\n  return obj;\n}\n/**\r\n * Get content-type from req/res objects.\r\n *\r\n * @param {object}\r\n * @return {Object}\r\n * @api private\r\n */\n\n\nfunction getcontenttype(obj) {\n  if (typeof obj.getHeader === 'function') {\n    // res-like\n    return obj.getHeader('content-type');\n  }\n\n  if (typeof obj.headers === 'object') {\n    // req-like\n    return obj.headers && obj.headers['content-type'];\n  }\n}\n/**\r\n * Quote a string if necessary.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @api private\r\n */\n\n\nfunction qstring(val) {\n  var str = String(val); // no need to quote tokens\n\n  if (tokenRegExp.test(str)) {\n    return str;\n  }\n\n  if (str.length > 0 && !textRegExp.test(str)) {\n    throw new TypeError('invalid parameter value');\n  }\n\n  return '\"' + str.replace(quoteRegExp, '\\\\$1') + '\"';\n}\n/**\r\n * Simply \"type/subtype+siffx\" into parts.\r\n *\r\n * @param {string} string\r\n * @return {Object}\r\n * @api private\r\n */\n\n\nfunction splitType(string) {\n  var match = typeRegExp.exec(string.toLowerCase());\n\n  if (!match) {\n    throw new TypeError('invalid media type');\n  }\n\n  var type = match[1];\n  var subtype = match[2];\n  var suffix; // suffix after last +\n\n  var index = subtype.lastIndexOf('+');\n\n  if (index !== -1) {\n    suffix = subtype.substr(index + 1);\n    subtype = subtype.substr(0, index);\n  }\n\n  var obj = {\n    type: type,\n    subtype: subtype,\n    suffix: suffix\n  };\n  return obj;\n}","map":{"version":3,"sources":["C:/Users/nithya/Desktop/team-4/client/node_modules/media-typer/index.js"],"names":["paramRegExp","textRegExp","tokenRegExp","qescRegExp","quoteRegExp","subtypeNameRegExp","typeNameRegExp","typeRegExp","exports","format","parse","obj","TypeError","parameters","subtype","suffix","type","test","string","param","params","Object","keys","sort","i","length","qstring","getcontenttype","index","indexOf","substr","key","match","splitType","value","lastIndex","exec","toLowerCase","replace","getHeader","headers","val","str","String","lastIndexOf"],"mappings":"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","sourcesContent":["/*!\r\n * media-typer\r\n * Copyright(c) 2014 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * RegExp to match *( \";\" parameter ) in RFC 2616 sec 3.7\r\n *\r\n * parameter     = token \"=\" ( token | quoted-string )\r\n * token         = 1*<any CHAR except CTLs or separators>\r\n * separators    = \"(\" | \")\" | \"<\" | \">\" | \"@\"\r\n *               | \",\" | \";\" | \":\" | \"\\\" | <\">\r\n *               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\r\n *               | \"{\" | \"}\" | SP | HT\r\n * quoted-string = ( <\"> *(qdtext | quoted-pair ) <\"> )\r\n * qdtext        = <any TEXT except <\">>\r\n * quoted-pair   = \"\\\" CHAR\r\n * CHAR          = <any US-ASCII character (octets 0 - 127)>\r\n * TEXT          = <any OCTET except CTLs, but including LWS>\r\n * LWS           = [CRLF] 1*( SP | HT )\r\n * CRLF          = CR LF\r\n * CR            = <US-ASCII CR, carriage return (13)>\r\n * LF            = <US-ASCII LF, linefeed (10)>\r\n * SP            = <US-ASCII SP, space (32)>\r\n * SHT           = <US-ASCII HT, horizontal-tab (9)>\r\n * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>\r\n * OCTET         = <any 8-bit sequence of data>\r\n */\r\nvar paramRegExp = /; *([!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) *= *(\"(?:[ !\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u0020-\\u007e])*\"|[!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) */g;\r\nvar textRegExp = /^[\\u0020-\\u007e\\u0080-\\u00ff]+$/\r\nvar tokenRegExp = /^[!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+$/\r\n\r\n/**\r\n * RegExp to match quoted-pair in RFC 2616\r\n *\r\n * quoted-pair = \"\\\" CHAR\r\n * CHAR        = <any US-ASCII character (octets 0 - 127)>\r\n */\r\nvar qescRegExp = /\\\\([\\u0000-\\u007f])/g;\r\n\r\n/**\r\n * RegExp to match chars that must be quoted-pair in RFC 2616\r\n */\r\nvar quoteRegExp = /([\\\\\"])/g;\r\n\r\n/**\r\n * RegExp to match type in RFC 6838\r\n *\r\n * type-name = restricted-name\r\n * subtype-name = restricted-name\r\n * restricted-name = restricted-name-first *126restricted-name-chars\r\n * restricted-name-first  = ALPHA / DIGIT\r\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\r\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\r\n * restricted-name-chars =/ \".\" ; Characters before first dot always\r\n *                              ; specify a facet name\r\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\r\n *                              ; specify a structured syntax suffix\r\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\r\n * DIGIT =  %x30-39             ; 0-9\r\n */\r\nvar subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/\r\nvar typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/\r\nvar typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nexports.format = format\r\nexports.parse = parse\r\n\r\n/**\r\n * Format object to media type.\r\n *\r\n * @param {object} obj\r\n * @return {string}\r\n * @api public\r\n */\r\n\r\nfunction format(obj) {\r\n  if (!obj || typeof obj !== 'object') {\r\n    throw new TypeError('argument obj is required')\r\n  }\r\n\r\n  var parameters = obj.parameters\r\n  var subtype = obj.subtype\r\n  var suffix = obj.suffix\r\n  var type = obj.type\r\n\r\n  if (!type || !typeNameRegExp.test(type)) {\r\n    throw new TypeError('invalid type')\r\n  }\r\n\r\n  if (!subtype || !subtypeNameRegExp.test(subtype)) {\r\n    throw new TypeError('invalid subtype')\r\n  }\r\n\r\n  // format as type/subtype\r\n  var string = type + '/' + subtype\r\n\r\n  // append +suffix\r\n  if (suffix) {\r\n    if (!typeNameRegExp.test(suffix)) {\r\n      throw new TypeError('invalid suffix')\r\n    }\r\n\r\n    string += '+' + suffix\r\n  }\r\n\r\n  // append parameters\r\n  if (parameters && typeof parameters === 'object') {\r\n    var param\r\n    var params = Object.keys(parameters).sort()\r\n\r\n    for (var i = 0; i < params.length; i++) {\r\n      param = params[i]\r\n\r\n      if (!tokenRegExp.test(param)) {\r\n        throw new TypeError('invalid parameter name')\r\n      }\r\n\r\n      string += '; ' + param + '=' + qstring(parameters[param])\r\n    }\r\n  }\r\n\r\n  return string\r\n}\r\n\r\n/**\r\n * Parse media type to object.\r\n *\r\n * @param {string|object} string\r\n * @return {Object}\r\n * @api public\r\n */\r\n\r\nfunction parse(string) {\r\n  if (!string) {\r\n    throw new TypeError('argument string is required')\r\n  }\r\n\r\n  // support req/res-like objects as argument\r\n  if (typeof string === 'object') {\r\n    string = getcontenttype(string)\r\n  }\r\n\r\n  if (typeof string !== 'string') {\r\n    throw new TypeError('argument string is required to be a string')\r\n  }\r\n\r\n  var index = string.indexOf(';')\r\n  var type = index !== -1\r\n    ? string.substr(0, index)\r\n    : string\r\n\r\n  var key\r\n  var match\r\n  var obj = splitType(type)\r\n  var params = {}\r\n  var value\r\n\r\n  paramRegExp.lastIndex = index\r\n\r\n  while (match = paramRegExp.exec(string)) {\r\n    if (match.index !== index) {\r\n      throw new TypeError('invalid parameter format')\r\n    }\r\n\r\n    index += match[0].length\r\n    key = match[1].toLowerCase()\r\n    value = match[2]\r\n\r\n    if (value[0] === '\"') {\r\n      // remove quotes and escapes\r\n      value = value\r\n        .substr(1, value.length - 2)\r\n        .replace(qescRegExp, '$1')\r\n    }\r\n\r\n    params[key] = value\r\n  }\r\n\r\n  if (index !== -1 && index !== string.length) {\r\n    throw new TypeError('invalid parameter format')\r\n  }\r\n\r\n  obj.parameters = params\r\n\r\n  return obj\r\n}\r\n\r\n/**\r\n * Get content-type from req/res objects.\r\n *\r\n * @param {object}\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction getcontenttype(obj) {\r\n  if (typeof obj.getHeader === 'function') {\r\n    // res-like\r\n    return obj.getHeader('content-type')\r\n  }\r\n\r\n  if (typeof obj.headers === 'object') {\r\n    // req-like\r\n    return obj.headers && obj.headers['content-type']\r\n  }\r\n}\r\n\r\n/**\r\n * Quote a string if necessary.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @api private\r\n */\r\n\r\nfunction qstring(val) {\r\n  var str = String(val)\r\n\r\n  // no need to quote tokens\r\n  if (tokenRegExp.test(str)) {\r\n    return str\r\n  }\r\n\r\n  if (str.length > 0 && !textRegExp.test(str)) {\r\n    throw new TypeError('invalid parameter value')\r\n  }\r\n\r\n  return '\"' + str.replace(quoteRegExp, '\\\\$1') + '\"'\r\n}\r\n\r\n/**\r\n * Simply \"type/subtype+siffx\" into parts.\r\n *\r\n * @param {string} string\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction splitType(string) {\r\n  var match = typeRegExp.exec(string.toLowerCase())\r\n\r\n  if (!match) {\r\n    throw new TypeError('invalid media type')\r\n  }\r\n\r\n  var type = match[1]\r\n  var subtype = match[2]\r\n  var suffix\r\n\r\n  // suffix after last +\r\n  var index = subtype.lastIndexOf('+')\r\n  if (index !== -1) {\r\n    suffix = subtype.substr(index + 1)\r\n    subtype = subtype.substr(0, index)\r\n  }\r\n\r\n  var obj = {\r\n    type: type,\r\n    subtype: subtype,\r\n    suffix: suffix\r\n  }\r\n\r\n  return obj\r\n}\r\n"]},"metadata":{},"sourceType":"script"}